#!/usr/bin/env python

import sys
import os
import time
import collections
import logging
from argparse import ArgumentParser

from common.interface.mysqlhistory import MySQLHistory
from common.interface.popdb import PopDB
from common.inventory import InventoryManager
from common.dataformat import Site

parser = ArgumentParser(description = 'Generate SitesInfo and RemainingDatasets files for Unified.')
parser.add_argument('--out', '-o', metavar = 'PATH', dest = 'out_path', default = '.', help = 'Output path.')
parser.add_argument('--cycle', '-c', metavar = 'ID', dest = 'cycle', type = int, default = 0, help = 'Cycle number.')
parser.add_argument('--log-level', '-l', metavar = 'LEVEL', dest = 'log_level', default = 'INFO', help = 'Logging level.')

args = parser.parse_args()
sys.argv = []

# Need to setup logging before loading other modules
log_level = getattr(logging, args.log_level.upper())
logging.basicConfig(level = log_level)

logger = logging.getLogger(__name__)

logger.info('Writing ASCII SiteInfo.')

history = MySQLHistory()

inventory = InventoryManager()

popdb = PopDB()
popdb.load(inventory)

partitions = ['Physics', 'DataOps', 'caf-comm', 'caf-alca', 'local', 'IB RelVal']

# Count datasets for RemainingDatasets
dataset_lists = collections.defaultdict(dict)
dscount_now = collections.defaultdict(int)
dscount_prev = collections.defaultdict(int)

sitesinfo = open(args.out_path + '/SitesInfo.txt', 'w')

sitesinfo.write('#\n')
sitesinfo.write('#- S I T E S  I N F O R M A T I O N ----\n')
sitesinfo.write('#\n')

for partition in partitions:
    # SitesInfo

    if args.cycle == 0:
        cycle = history.get_latest_deletion_run(partition = partition)
    else:
        cycle = args.cycle

    if cycle == 0:
        timestamp = 0
    else:
        timestamp = history.get_run_timestamp(cycle)

    sitesinfo.write('#- %s\n' % time.strftime('%Y-%m-%d %H:%M', time.localtime(timestamp)))
    sitesinfo.write('#\n')
    sitesinfo.write('#- DDM Partition: ' + partition.replace(' ', '-') + ' -\n')
    sitesinfo.write('#\n')
    sitesinfo.write('#  Active Quota[TB] Taken[TB] LastCopy[TB] SiteName\n')
    sitesinfo.write('#------------------------------------------------------\n')

    if cycle == 0:
        sitesinfo.write('# N/A\n')
        continue

    sites_info = history.get_sites(cycle)
    sites_usage = history.get_deletion_decisions(cycle)

    quota_total = 0
    used_total = 0.
    protect_total = 0.

    num_t2 = 0
    quota_t2total = 0
    used_t2total = 0.
    protect_t2total = 0.

    for site in sorted(sites_info):
        status, quota = sites_info[site]
        try:
            protect, delete, keep = sites_usage[site]
        except KeyError:
            protect = delete = keep = 0.

        used = protect + delete + keep

        if status == Site.STAT_READY:
            active = 1
        elif status == Site.STAT_UNKNOWN:
            active = 2
        else:
            active = 0

        sitesinfo.write("   %-6d %-9d %-9.0f %-12.0f %-20s \n" % \
            (active, quota, used, protect, site))

        quota_total += quota
        used_total += used
        protect_total += protect

        if site.startswith('T2_'):
            num_t2 += 1
            quota_t2total += quota
            used_t2total += used
            protect_t2total += protect

    sitesinfo.write('#------------------------------------------------------\n')

    sitesinfo.write('#  %-6d %-9d %-9d %-12d %-20s \n' % \
        (len(sites_info), quota_total, used_total, protect_total, 'Total T2s+T1s'))

    if quota_total > 0:
        used_fraction = used_total / quota_total
        protect_fraction = protect_total / quota_total
    else:
        used_fraction = 1.
        protect_fraction = 1.

    sitesinfo.write('#  %-6s %-9s %-4.1f%%     %-4.1f%%\n' % \
        (' ', ' ', used_fraction * 100., protect_fraction * 100.))
    
    sitesinfo.write('#\n')

    sitesinfo.write('#  %-6d %-9d %-9d %-12d %-20s \n' % \
        (num_t2, quota_t2total, used_t2total, protect_t2total, 'Total T2s'))

    if quota_t2total > 0:
        used_fraction = used_t2total / quota_t2total
        protect_fraction = protect_t2total / quota_t2total
    else:
        used_fraction = 1.
        protect_fraction = 1.

    sitesinfo.write('#  %-6s %-9s %-4.1f%%     %-4.1f%%\n' % \
        (' ', ' ', used_fraction * 100., protect_fraction * 100.))

    sitesinfo.write('#------------------------------------------------------\n')
    sitesinfo.write('#\n')

    # RemainingDatasets

    results = history.get_deletion_decisions(cycle, size_only = False)
    for site, datasets in results.items():
        dataset_lists[site][partition] = []
        for (dataset, size, decision, reason) in datasets:
            dscount_now[dataset] += 1
            dataset_lists[site][partition].append((dataset, size))

    prev_cycle = history.get_latest_deletion_run(partition = partition, before = cycle)
    results = history.get_deletion_decisions(prev_cycle, size_only = False)
    for site, datasets in results.items():
        for (dataset, size, decision, reason) in datasets:
            dscount_prev[dataset] += 1

sitesinfo.close()

for site in dataset_lists:
    st = inventory.sites[site]

    if not os.path.isdir(args.out_path + '/result/' + site):
        os.makedirs(args.out_path + '/result/' + site)

    remaining = open(args.out_path + '/result/' + site + '/RemainingDatasets.txt', 'w')

    remaining.write('# -- ' + time.strftime('%Y-%m-%d %H:%M') + '\n')
    remaining.write('\n')
    remaining.write('# Rank = Ta - N - S if N != 0')
    remaining.write('# Rank = Tc - S if N == 0')
    remaining.write('# where')
    remaining.write('#  Ta = (number of days since last access via CRAB)')
    remaining.write('#  Tc = (number of days since dataset transfer to site)')
    remaining.write('#  N = (number of recorded accesses via CRAB)')
    remaining.write('#  S = (dataset size in TB)')

    for partition in partitions:
        remaining.write('#\n')
        remaining.write('#- DDM Partition: ' + partition + ' -\n')
        remaining.write('#\n')
        remaining.write('#  Rank      Size nsites nsites  DatasetName\n')
        remaining.write('#[~days]     [GB] before after\n')
        remaining.write('#---------------------------------------------\n')

        if partition not in dataset_lists[site]:
            continue

        for dataset, size in dataset_lists[site][partition]:
            try:
                local_rank = inventory.datasets[dataset].demand['local_usage'][st].rank
            except KeyError:
                local_rank = 9999.9

            remaining.write('  %6.1f %9.1f %6d %6d  %s\n' % (local_rank, size * 1.e-9, dscount_prev[dataset], dscount_now[dataset], dataset))

    remaining.close()
        
logger.info('Finished writing ASCII SiteInfo.')
