#!/usr/bin/env python

import sys
import logging
from argparse import ArgumentParser

parser = ArgumentParser(description = 'Dynamo')
parser.add_argument('--config', '-c', metavar = 'CONFIG', dest = 'config', default = '', help = 'Configuration JSON.')
parser.add_argument('--updated-since', '-t', metavar = 'TIMESTAMP', dest = 'updated_since', type = int, default = 0, help = 'Unix timestamp of the last update.')
parser.add_argument('--log-level', '-l', metavar = 'LEVEL', dest = 'log_level', default = 'INFO', help = 'Logging level.')

args = parser.parse_args()
sys.argv = []

## Set up logging (write to stderr unless path is given)
log_level = getattr(logging, args.log_level.upper())
log_format = '%(asctime)s:%(levelname)s:%(name)s: %(message)s'

LOG = logging.getLogger()
LOG.setLevel(log_level)
log_handler = logging.StreamHandler()
log_handler.setFormatter(logging.Formatter(fmt = log_format))
LOG.addHandler(log_handler)

LOG.info('Starting inventory update.')

from dataformat import Configuration, DatasetReplica
import source.impl as sources

#dynamo: inventory

with open(args.config) as source:
    config = Configuration(source)

group_source = sources.PhEDExGroupInfoSource(config.groups.config)
site_source = sources.PhEDExSiteInfoSource(config.sites.config)
dataset_source = sources.PhEDExDatasetInfoSource(config.datasets.config)
replica_source = sources.PhEDExReplicaInfoSource(config.replicas.config)

LOG.info('Updating list of groups.')
for group in group_source.get_group_list():
    dynamo.update(group, check = True)

LOG.info('Updating list of sites.')
for site in site_source.get_site_list():
    dynamo.update(site, check = True)

## Fetch the full list of block replicas that were updated since updated_since.
## New datasets and blocks will be caught in the process.

LOG.info('Updating list of datasets, blocks, and replicas.')
for replica in replica_source.get_updated_replicas(args.updated_since):
    replica_str = str(replica)

    LOG.debug('Updating %s', replica_str)

    # pick up replicas only at known groups and sites
    if replica.group is not None and replica.group.name not in dynamo.groups:
        LOG.debug('%s is owned by %s, which is not a tracked group.', replica_str, replica.group.name)

        continue

    try:
        site = dynamo.sites[replica.site.name]
    except KeyError:
        LOG.debug('%s is at %s, which is not a tracked site.', replica_str, replica.site.name)

        continue

    try:
        dataset = dynamo.datasets[replica.block.dataset.name]
    except KeyError:
        LOG.info('Unknown dataset %s. Collecting information.', replica.block.dataset.name)

        dataset = dataset_source.get_dataset(replica.block.dataset.name)
        if dataset is None:
            LOG.error('Unknown dataset %s.', replica.block.dataset.name)
            continue

    LOG.debug('Updating information for dataset %s', dataset.name)

    dynamo.update(dataset, check = True)
    for block in dataset.blocks:
        dynamo.update(block, check = True)

    block = dataset.find_block(replica.block.name)
    if block is None:
        block_full_name = replica.block.full_name()

        LOG.debug('Unknown block %s. Collecting information.', block_full_name)

        block = dataset_source.get_block(block_full_name, dataset)
        if block is None:
            LOG.error('Unknown block %s.', block_full_name)
            continue

        dataset.blocks.add(block)
        dataset.size += block.size
        dataset.num_files += block.num_files

        dynamo.update(dataset)

    LOG.debug('Updating information for block %s', block.full_name())

    dynamo.update(block, check = True)

    dataset_replica = dataset.find_replica(site)
    if dataset_replica is None:
        dataset_replica = DatasetReplica(dataset, site)

        LOG.debug('Creating new dataset replica %s.', str(dataset_replica))

    LOG.debug('Updating information for dataset replica %s', str(dataset_replica))

    dynamo.update(dataset_replica, check = True)

    if replica.is_custodial and not dataset_replica.is_custodial:
        LOG.debug('Setting dataset replica custodial.')

        dataset_replica.is_custodial = True
        dynamo.update(dataset_replica)

    LOG.debug('Updating block replica.')
    
    dynamo.update(replica)

## Repeat for deleted block replicas.

for replica in replica_source.get_deleted_replicas(args.updated_since):
    replica_str = str(replica)

    LOG.debug('Deleting %s', replica_str)

    # blockreplica.delete_from() raises a KeyError or ObjectError if
    # any of the group, site, dataset, ... is not found
    try:
        dynamo.delete(replica)
    except KeyError:
        LOG.debug('Replica not found.')
        pass
    except ObjectError:
        LOG.debug('Replica not found.')
        pass

## Check if any of the UNKNOWN-status datasets became available in DBS.

for dataset in dynamo.datasets.itervalues():
    if dataset.status != Dataset.STAT_UNKNOWN:
        continue

    dataset_source._fill_dataset_details(dataset)
    if dataset.status != Dataset.STAT_UNKNOWN:
        dynamo.update(dataset)

LOG.info('Inventory update completed.')
