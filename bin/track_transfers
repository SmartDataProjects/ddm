#!/usr/bin/env python

import sys
import os
import time
import rrdtool
import selinux
import subprocess
import random

import common.configuration as config
import common.interface.classes as classes

from glob import glob
from datetime import datetime, timedelta

###############################################################
####### This script will spit out png files monitoring ########
####### the copy status through Phedex on three levels: #######
####### -per replica, -per request, -per site #################
#
####### yiiyama@mit.edu, bmaier@mit.edu #######################
###############################################################
DEBUG = 0

partition = 'AnalysisOps'

rrd_dir = config.paths.data + '/track_transfers'
sites = glob(rrd_dir+'/*')
sites.remove('/var/spool/dynamo/track_transfers/monitoring')
try:
    sites.remove('/var/spool/dynamo/track_transfers/total.rrd')
except:
    pass

# Existing rrd and png files
existing_rrds = glob(rrd_dir+'/*/*.rrd')
existing_pngs = glob(rrd_dir+'/*/*.png')

if DEBUG:
    print existing_rrds 

# Interval of the rrd file timestamps
interval = 900

# Defining some global properties
graphDefs = [
    '--width=400', '--height=300', '--full-size-mode',
    '--vertical-label=CopyStatus',
    '--lower-limit=0',
    '--watermark=github.com/SmartDataProjects/dynamo',
]  

try:
    os.makedirs(rrd_dir)
except:
    pass

history = classes.default_interface['history']()

request_ids = []

try:
    source_path = sys.argv[1]
    with open(source_path) as source:
        for line in source:
            request_ids.append(int(line.strip()))

except:
    records = history.get_incomplete_copies(partition)    
    for record in records:
        request_ids.append(record.operation_id)

if DEBUG:
    print 'Incomplete copies at the moment: ', len(request_ids) 

copy = classes.default_interface['copy']()

timestamp = int(time.time()) / interval * interval

incomplete_replicas_rrd = []
incomplete_replicas_png = []

# Keeping track of total volume ...
total_volume = 0
copied_volume = 0
total_rrdfile = rrd_dir+'/total.rrd'

# ... and of site volume
sites_total = []
sites_copied = []

start = (int(time.time()) / interval - 1) * interval

if not os.path.exists(total_rrdfile):
    
    rrdtool.create(total_rrdfile, '--start', str(start), '--step', str(interval),
                   'DS:copied:GAUGE:%d:0:U' % (interval * 800),
                   'DS:total:GAUGE:%d:0:U' % (interval * 800),
                   'RRA:LAST:0:1:%i' % 672    )

# Now create new rrd files and create pngs
counter = 0

for record in records:

    request_id = record.operation_id
#   Debug area
    counter = counter + 1
#    if counter > 3:
#        break
    
    if DEBUG:
        print request_id #Debug   
#   End of debug area

    status = copy.copy_status(request_id)

    request_total = 0
    request_copied = 0
    replicas_in_request = []
    replica_total_sizes = []

    rrd_defstring = ""
    rrd_cdefstring = ""
    rrd_cdefcopstring = "CDEF:copied="
    rrd_cdeftotstring = "CDEF:total="

    for (site, dataset), (total, copied, last_update) in status.items():
        replica_total_sizes.append(total)
        sites_total.append([site,total])
        sites_copied.append([site,copied])

        rrd_filepath = rrd_dir + '/' + site
        tmp = rrd_dir + '/' + site + '/'  +  str(request_id) + '_' + dataset.replace('/', '+') + '.rrd'
        rrd_file = tmp.replace('+','',1)
        png_file = '%s/monitoring/replica__%s__%s.png' % (rrd_dir , site , rrd_file.rsplit('.',1)[0].rsplit('/',1)[1])
        incomplete_replicas_rrd.append(rrd_file)
        incomplete_replicas_png.append(png_file)
         
        if not os.path.exists(rrd_filepath):
            # Create path corresponding to site
            subprocess.call("mkdir %s" % rrd_filepath, shell=True)
        
        if not os.path.exists(rrd_file):
            # RRD does not exist yet
            start = (int(time.time()) / interval - 1) * interval
            timestamp_id = start

            # Let rrd file start at timestamp corresponding to creation of transfer request
            for record in records:
                if record.operation_id == request_id:
                    timestamp_id = record.timestamp

            # Write rrd file
            rrdtool.create(rrd_file, '--start', str(start), '--step', str(interval),
                'DS:copied:GAUGE:%d:0:U' % (interval * 800),
                'DS:total:GAUGE:%d:0:U' % (interval * 800),
                'RRA:LAST:0:1:%i' % 1344    )

            # data source
            #  DS:<name>:<type>:<heartbeat>:<min>:<max>
            #  type = GAUGE: quantity that has a value at each time point
            #  heartbeat: "maximum number of seconds that may pass between two updates of this data source before the value of the data source is assumed to be *UNKNOWN*"
            #  min/max = U: unknown
            # round robin archive (RRA)
            #  RRA:<type>:<xff>:<nsteps>:<nrows>
            #  type = LAST: just use the last value, no averaging etc.
            #  xff: fraction of <nsteps> that can have UNKNOWN as the value
            #  nsteps: number of steps used for calculation
            #  nrows: number of records to keep

            # change selinux context of the RRD so that it can be read by a apache-invoked PHP script
            try:
                selinux.chcon(rrd_file, 'unconfined_u:object_r:httpd_sys_content_t:s0')
            except:
                pass

        try:
            # Keeping track of the request status
            replicas_in_request.append(rrd_file)
            request_total += total
            request_copied += copied            

            # Massaging the DEF and CDEF strings  
            if len(replicas_in_request)==1:
                rrd_defstring = 'DEF:copied%s=%s:copied:LAST DEF:total%s=%s:total:LAST' % (len(replicas_in_request) , rrd_file , len(replicas_in_request) , rrd_file)
                rrd_cdefcopstring = rrd_cdefcopstring + "copied%s" % len(replicas_in_request)
                rrd_cdeftotstring = rrd_cdeftotstring + "total%s" % len(replicas_in_request)
            else:
                rrd_defstring = rrd_defstring + " " + 'DEF:copied%s=%s:copied:LAST DEF:total%s=%s:total:LAST' % (len(replicas_in_request), rrd_file , len(replicas_in_request) , rrd_file)
                rrd_cdefcopstring = rrd_cdefcopstring + ",copied%s,+" % len(replicas_in_request)
                rrd_cdeftotstring = rrd_cdeftotstring + ",total%s,+" % len(replicas_in_request)

            rrdtool.update(rrd_file, '%d:%d:%d' % (timestamp, copied, total))
            # Creating a copy status plot for each dataset
            rrdtool.graph('%s/monitoring/replica__%s__%s.png' % (rrd_dir , site , rrd_file.rsplit('.',1)[0].rsplit('/',1)[1]),'--width=400', '--height=300', '--full-size-mode', '--vertical-label=CopyStatus', '--lower-limit=0', '--watermark=github.com/SmartDataProjects/dynamo','--title=%s' % rrd_file.rsplit('.',1)[0].rsplit('/',1)[1], 'DEF:copied=%s:copied:LAST' % rrd_file, 'DEF:total=%s:total:LAST' % rrd_file, 'AREA:copied#aaffcc:Copied \l', 'LINE2:total#FF0000:Total \l','COMMENT:ID %s, created on %s'% (request_id, str(time.ctime(record.timestamp)).replace(':','\:')))
            
        except:
            pass

    rrd_cdefstring = rrd_cdefcopstring + " " + rrd_cdeftotstring       
    rrd_string = rrd_defstring + " " + rrd_cdefstring
    rrd_arglist = graphDefs + rrd_string.split()

    if DEBUG:
        print 'NUMBER OF REPLICAS: ', len(replicas_in_request)
        print 'Request copied: ', request_copied
        print 'Request total: ', request_total
            
    # Update history DB
    if len(status) != 0:
        if request_total != record.size or request_copied == request_total:
            record.size = request_total
            record.completed = (request_copied == request_total)
        
            history.update_copy_entry(record)

    if DEBUG:
        print 'Request still existing? ', (len(status) != 0)
        print 'Size: ', record.size
        print 'Copied: ', record.completed

    total_volume += request_total
    copied_volume += request_copied 

    rrd_arglist.append('AREA:copied#aaffcc:Copied \l')
    rrd_arglist.append('LINE2:total#FF0000:Total \l')

    l2 = sorted(range(len(replica_total_sizes)),key=lambda x:replica_total_sizes[x],reverse=True)

    # List copied status of single datasets within the request
    if len(replicas_in_request) > 1:
        for i in range(len(replicas_in_request)):
            rrd_arglist.append('LINE2:copied%s#%06x:Replica with total share of %s %% \l' % ( (l2[i]+1), random.randint(0, 0xFFFFFF),   ( 100*replica_total_sizes[l2[i]]/request_total )   ))

    rrd_arglist.append('COMMENT:Request created on %s \l' % str(time.ctime(record.timestamp)).replace(':','\:'))

    # Plotting
    try:
        rrdtool.graph('%s/monitoring/request__%s__%s.png' % (rrd_dir , record.site_name, request_id),  *tuple(['--title=Request %s' % request_id] + rrd_arglist ))
    except:
        pass


# Create overviews for different sites

for site in sites:
    
    rrd_filepath = site
    
    site_copied = 0
    site_total = 0
    replicas_in_site = 0

    site = site.replace(rrd_dir+'/','',1)
    
    for i in range(len(sites_copied)):
        for j in range(len(sites_copied[i])):
            if sites_copied[i][j] == site:
                replicas_in_site = replicas_in_site + 1
                if sites_copied[i][j+1] == None:
                    sites_copied[i][j+1] = 0
                site_copied = site_copied + sites_copied[i][j+1]
                site_total = site_total + sites_total[i][j+1]

    if not os.path.exists(rrd_filepath+'/site.rrd'):
        rrdtool.create(rrd_filepath+'/site.rrd', '--start', str(start), '--step', str(interval),
                   'DS:copied:GAUGE:%d:0:U' % (interval * 800),
                   'DS:total:GAUGE:%d:0:U' % (interval * 800),
                   'RRA:LAST:0:1:%i' % 672    )

    # Plotting
    try:
        rrdtool.update(rrd_filepath+'/site.rrd', '%d:%d:%d' % (timestamp, site_copied, site_total))
        rrdtool.graph('%s/monitoring/site__%s.png' % (rrd_dir , site), '--start=%d' % (time.time() - 3600 * 24 * 4), *tuple(['--title=%s' % site] + graphDefs + ['DEF:copied=%s:copied:LAST' % (rrd_filepath+'/site.rrd')] + ['DEF:total=%s:total:LAST' % (rrd_filepath+'/site.rrd')] + ['AREA:copied#aaffcc:Copied \l'] +['LINE2:total#FF0000:Total \l'] + ['COMMENT:Replicas being copied\: %s ' % str(replicas_in_site)]))
    except:
        pass


# Total png

try:
    rrdtool.update(total_rrdfile, '%d:%d:%d' % (timestamp, copied_volume, total_volume))
    rrdtool.graph('%s/monitoring/total.png' % rrd_dir,'--start=%d' % (time.time() - 3600 * 24 * 4),'--width=400', '--height=300', '--full-size-mode', '--vertical-label=CopyStatus', '--lower-limit=0', '--watermark=github.com/SmartDataProjects/dynamo', '--title=Total volume', 'DEF:copied=%s:copied:LAST' % total_rrdfile, 'DEF:total=%s:total:LAST' % total_rrdfile, 'AREA:copied#aaffcc:Copied \l', 'LINE2:total#FF0000:Total \l', 'COMMENT:Incomplete requests\: %s' % str(len(request_ids)))
except:
    pass



# Deletion part - first delete rrd files of completed requests that are older than one week, since we do not want them to be a part of the graphs anymore 

older_than = datetime.now() - timedelta(days=20)

for existing_rrd in existing_rrds:

    filetime = datetime.fromtimestamp(os.path.getmtime(existing_rrd))

    if existing_rrd not in incomplete_replicas_rrd and filetime < older_than:
        # Delete pngs and rrd files
        subprocess.call("rm -f %s" % existing_rrd, shell=True) 

for existing_png in existing_pngs:

    filetime = datetime.fromtimestamp(os.path.getmtime(existing_png))

    if existing_png not in incomplete_replicas_png and filetime < older_than:
        # Delete pngs and rrd files
        subprocess.call("rm -f %s" % existing_png, shell=True) 



# Copying pngs to the /var/www location

subprocess.call("rm /var/www/html/dynamo/dealermon/monitoring/*.png", shell=True)
subprocess.call("cp /var/spool/dynamo/track_transfers/monitoring/*.png /var/www/html/dynamo/dealermon/monitoring/", shell=True)
subprocess.call("cp -r /var/spool/dynamo/track_transfers/T* /var/www/html/dynamo/dealermon/monitoring/", shell=True)
