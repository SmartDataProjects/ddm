#!/usr/bin/env python

import sys
import os
import logging
import time
import re
import fnmatch

from argparse import ArgumentParser

parser = ArgumentParser(description = 'Dynamo')
parser.add_argument('module', metavar = 'MODULE', nargs = '+', help = 'detox and/or dealer.')
parser.add_argument('--force-inventory-update', '-I', action = 'store_true', dest = 'force_inventory_update', help = 'Force inventory to update.')
parser.add_argument('--detox-partition', '-p', metavar = 'PARTITION', dest = 'detox_partitions', nargs = '+', default = ['Physics', 'RelVal'], help = 'Name of the detox partitions. Syntax is <partition>[:<definition name>]. Definition name is translated to path DYNAMO_BASE/policies/detox/<partition>.txt. If none is given, partition name is used.')
parser.add_argument('--dealer-plugins', '-g', metavar = 'PLUGIN:PRIORITY', dest = 'dealer_plugins', nargs = '+', default = ['Popularity:3', 'Balancer:2', 'Undertaker:1'], help = 'Name:Priority of the dealer plugins to run.')
parser.add_argument('--comment', '-m', metavar = 'COMMENT', dest = 'comment', help = 'Comment to be sent to deletion interface as well as the local deletion record.')
parser.add_argument('--no-auto-approval', '-P', action = 'store_true', dest = 'no_auto_approval', help = 'Do not approve deletion and transfer requests automatically.')
parser.add_argument('--log-level', '-l', metavar = 'LEVEL', dest = 'log_level', default = 'INFO', help = 'Logging level.')
parser.add_argument('--log-file', '-o', metavar = 'PATH', dest = 'log_file', default = '', help = 'Log output file.')
parser.add_argument('--dry-run', '-D', action = 'store_true', dest = 'dry_run', help = 'Do not make any actual deletion requests or changes to local databases.')
parser.add_argument('--test-run', '-T', action = 'store_true', dest = 'test_run', help = 'Make a test run (results recorded in local database).')
### TEMPORARY
parser.add_argument('--load-locks', '-L', action = 'store_true', dest = 'load_replica_locks', help = 'Load replica locks from web to mysql.')

args = parser.parse_args()
sys.argv = []

# Need to setup logging before loading other modules
log_level = getattr(logging, args.log_level.upper())

if args.log_file:
    logging.basicConfig(filename = args.log_file, filemode = 'w', level = log_level)
else:
    logging.basicConfig(level = log_level)

from common.inventory import InventoryManager
from common.transaction import TransactionManager
from common.demand import DemandManager
import common.interface.classes as classes
from common.interface.activitylock import ActivityLock
from detox.main import Detox
from detox.policy import Policy
from dealer.main import Dealer
from dealer.policy import DealerPolicy
from dealer.plugins import plugins as dealer_plugins
from common.dataformat import Site
import common.configuration as config

if os.path.exists('/var/run/dynamod.pid'):
    with open('/var/run/dynamod.pid') as pidfile:
        if os.getppid() == int(pidfile.read()):
            config.daemon_mode = True

if args.dry_run:
    config.read_only = True

elif not args.comment and not config.daemon_mode:
    print 'Non-dry run from command line requires a comment (-m).'
    sys.exit(1)

inventory_manager = InventoryManager(load_data = False)

if args.force_inventory_update:
    inventory_manager.update(make_snapshot = False)
else:
    inventory_manager.load(load_blocks = True, load_files = config.application.use_files, load_replicas = True)

config.phedex.auto_approve_deletions = not args.no_auto_approval

transaction_manager = TransactionManager()

demand_manager = DemandManager()

history = classes.default_interface['history']()

with open(os.environ['DYNAMO_BASE'] + '/etc/policies.tag') as tag:
    policy_version = tag.read().strip()

if 'detox' in args.module:
    ### TEMPORARY
    if args.load_replica_locks:
        from common.interface.weblock import WebReplicaLock
        from common.interface.webservice import RESTService, POST
    
        mysqllock_users = config.mysqllock.users
        config.mysqllock.users = []
    
        # careful - order matters!
        weblock_users = [
            ('vlimant', 'unified'),
            ('vlimant', 'unified-testbed'),
            ('vlimant', 'wmcore'),
            ('dmytro', 't0-prod'),
            ('dmytro', 't0-replayone'),
            ('dmytro', 't0-replaytwo')
        ]
        
        for iu, (url, auth_type, content_type, site_pattern) in enumerate(config.weblock.sources):
            weblock = WebReplicaLock(sources = [(url, auth_type, content_type, site_pattern)])
        
            weblock.update(inventory_manager)
        
            data = []
            
            for dataset in inventory_manager.datasets.values():
                try:
                    locked_blocks = dataset.demand['locked_blocks']
                except KeyError:
                    continue
            
                entries = []
            
                collapse_dataset = True
        
                locked_sites = set()
                for site, blocks in locked_blocks.items():
                    replica = dataset.find_replica(site)
            
                    blocks_in_replica = set()
                    for block_replica in replica.block_replicas:
                        blocks_in_replica.add(block_replica.block)
        
                    if blocks_in_replica == blocks:
                        entries.append({'item': dataset.name, 'sites': site.name, 'expires': '2017-12-31', 'comment': 'Auto-produced by dynamo'})
                    else:
                        for block in blocks:
                            entries.append({'item': dataset.name + '#' + block.real_name(), 'sites': site.name, 'expires': '2017-12-31', 'comment': 'Auto-produced by dynamo'})
            
                        collapse_dataset = False
        
                    locked_sites.add(site)
        
                if locked_sites != set(r.site for r in dataset.replicas):
                    collapse_dataset = False
            
                if collapse_dataset:
                    entries = [{'item': dataset.name, 'expires': '2017-12-31', 'comment': 'Auto-produced by dynamo'}]
            
                data.extend(entries)
            
                dataset.demand.pop('locked_blocks')
        
            service = RESTService('https://' + config.hostname + '/registry/detoxlock')
            service.make_request('set?asuser=%s&service=%s' % weblock_users[iu], method = POST, options = data, format = 'json')
    
        config.mysqllock.users = mysqllock_users


    # Main detox object
    
    detox = Detox(inventory_manager, transaction_manager, demand_manager, history)
    
    # Set up detox policies and run
    for part_spec in args.detox_partitions:
        partdef = part_spec.split(':')

        part_name = partdef[0]
        if len(partdef) > 1:
            def_name = partdef[1]
        else:
            def_name = part_name
    
        def_path = os.environ['DYNAMO_BASE'] + '/policies/detox/' + def_name + '.txt'

        partition = Site.partitions[part_name]

        with open(def_path) as policy_def:    
            policy = Policy(partition, policy_def, policy_version, inventory_manager)

        for plugin in policy.used_demand_plugins:
            if plugin not in demand_manager.calculators:
                demand_manager.calculators[plugin] = classes.demand_plugins[plugin]()

        with ActivityLock('detox'):
            detox.run(policy, is_test = args.test_run, comment = args.comment)

if 'dealer' in args.module:
    # Main dealer object
    
    dealer = Dealer(inventory_manager, transaction_manager, demand_manager, history)

    policy = DealerPolicy(Site.partitions['Physics'], group = inventory_manager.groups['AnalysisOps'], version = policy_version)

    for plugin_conf in args.dealer_plugins:
        try:
            name, priority = plugin_conf.split(':')
        except ValueError:
            name = plugin_conf
            priority = 1

        priority = int(priority)

        plugin = dealer_plugins[name]

        if name == 'Balancer' or name == 'Undertaker':
            plugin.history = history

        policy.add_plugin(plugin, priority)

    for plugin in policy.used_demand_plugins:
        if plugin not in demand_manager.calculators:
            demand_manager.calculators[plugin] = classes.demand_plugins[plugin]()

    with ActivityLock('dealer'):
        dealer.run(policy, is_test = args.test_run, comment = args.comment)
