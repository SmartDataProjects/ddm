#!/usr/bin/env python

import os
import sys
import json
from argparse import ArgumentParser

import dynamo.client.request as request
from dynamo.utils.interface.webservice import GET, POST
from dynamo.dataformat import Configuration

PROXY = '/tmp/x509up_u%d' % os.getuid()

parser = ArgumentParser(description = 'Request copy or deletion of datasets and blocks.')
parser.add_argument('--delete', '-D', action = 'store_true', dest = 'delete', help = 'Request deletions.')
parser.add_argument('--dataset', '-d', metavar = 'DATASET', dest = 'datasets', nargs = '+', default = [], help = 'Datasets to copy.')
parser.add_argument('--block', '-b', metavar = 'BLOCK', dest = 'blocks', nargs = '+', default = [], help = 'Blocks to copy.')
parser.add_argument('--site', '-s', metavar = 'SITE', dest = 'sites', nargs = '+', help = 'Sites to copy to.')
parser.add_argument('--num-copies', '-n', metavar = 'SITE', dest = 'n', type = int, default = 1, help = 'Sites to copy to.')
parser.add_argument('--cancel', '-x', metavar = 'ID', dest = 'cancel', help = 'Cancel a copy request.')
parser.add_argument('--poll', '-l', metavar = 'ID', dest = 'poll', nargs = '?', const = 0, help = 'Check the status of a copy request.')
parser.add_argument('--status', '-t', metavar = 'STATUS', dest = 'statuses', nargs = '+', help = 'Polling option. Limit to statuses new, activated, completed, rejected, or cancelled')
parser.add_argument('--user', '-u', metavar = 'USER', dest = 'users', nargs = '+', help = 'Polling option. Limit to requests made by specified users.')
parser.add_argument('--raw', '-A', action = 'store_true', dest = 'raw', help = 'Print the raw JSON response from the Dynamo REST API.')
parser.add_argument('--host', '-o', metavar = 'HOST', dest = 'host', default = socket.gethostname(), help = 'Host name of the dynamo server (ex. example.com).')
parser.add_argument('--cert', '-c', metavar = 'CERT', dest = 'cert', default = PROXY, help = 'User certificate location.')
parser.add_argument('--key', '-k', metavar = 'KEY', dest = 'key', default = PROXY, help = 'User certificate key location.')

args = parser.parse_args()
sys.argv = []

## Prepare the data to send

items = args.datasets + args.blocks

resource = ''
need_auth = True

try:
    if args.delete:
        if args.poll is not None:
            if args.poll == 0:
                args.poll = None
            if len(items) == 0:
                items = None

            resource = 'polldelete'
            data = request.polldelete(args.poll, items, args.sites, args.statuses, args.users)
            need_auth = False
    
        else:
            if len(items) == 0:
                raise RuntimeError('Missing --dataset or --block.')
            if args.sites is None:
                raise RuntimeError('Missing --site')

            resource = 'delete'
            data = request.delete(items, args.sites)

    else:
        if args.cancel is not None:
            resource = 'cancelcopy'
            data = request.cancelcopy(args.cancel)

        elif args.poll is not None:
            if args.poll == 0:
                args.poll = None
            if len(items) == 0:
                items = None
    
            resource = 'pollcopy'
            data = request.pollcopy(args.poll, items, args.sites, args.statuses, args.users)
            need_auth = False
    
        else:
            if len(items) == 0:
                raise RuntimeError('Missing --dataset or --block.')
            if args.sites is None:
                raise RuntimeError('Missing --site')

            resource = 'copy'
            data = requestcopy(items, args.sites, args.n)

except Exception as ex:
    sys.stderr.write(str(ex) + '\n')
    sys.exit(1)

if not resource:
    sys.stderr.write('Invalid combination of options.')
    sys.exit(1)

## Instantiate the request client and send th request

# url_base will be replaced to http if need_auth = False
config = Configuration(url_base = 'https://%s/data/request', need_auth = need_auth)

client = request.DynamoWebClient(config)

response = client.make_request(resource, data, method = POST)

if response is None:
    sys.exit(1)

if args.raw:
    print json.dumps(response)
    sys.exit(0)

if args.poll:
    # list
    print response
elif args.cancel:
    # show
    print response
else:
    print response
