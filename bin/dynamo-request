#!/usr/bin/env python

import os
import sys
import requests
import socket
import time

def requestcopy(host, cert, key, items, sites, n = 1):
    requests.packages.urllib3.disable_warnings()

    url = 'https://%s/data/request/copy' % host

    data = []
    for item in items:
        data.append(('item[]', item))
    for site in sites:
        data.append(('site[]', site))
    data.append(('n', n))

    for attempt in xrange(5):
        response = requests.request('POST', url = url, data = data, verify = False, timeout = 600, cert = (cert, key))

        if response.status_code == 200:
            return response.text
        elif response.status_code == 503:
            print 'Server is unavailable:', response.text
            time.sleep(2)
            continue
        else:
            raise RuntimeError(response.text)

def pollcopy(host, cert, key, rid = None, items = None, sites = None, statuses = None, users = None):
    requests.packages.urllib3.disable_warnings()

    url = 'https://%s/data/request/pollcopy' % host

    data = []
    if rid is not None:
        data.append(('request_id', rid))
    if items is not None:
        data.extend(('item[]', item) for item in items)
    if sites is not None:
        data.extend(('site[]', site) for site in sites)
    if statuses is not None:
        data.extend(('status[]', status) for status in statuses)
    if users is not None:
        data.extend(('user[]', user) for user in users)

    if len(data) == 0:
        raise RuntimeError('No selection specified')

    for attempt in xrange(5):
        response = requests.request('POST', url, data = data, verify = False, timeout = 600, cert = (cert, key))

        if response.status_code == 200:
            return response.text
        elif response.status_code == 503:
            print 'Server is unavailable:', response.text
            time.sleep(2)
            continue
        else:
            raise RuntimeError(response.text)

def cancelcopy(host, cert, key, rid):
    requests.packages.urllib3.disable_warnings()

    url = 'https://%s/data/request/cancelcopy' % host

    data = {'request_id': rid}

    for attempt in xrange(5):
        response = requests.request('POST', url, data = data, verify = False, timeout = 600, cert = (cert, key))

        if response.status_code == 200:
            return response.text
        elif response.status_code == 503:
            print 'Server is unavailable:', response.text
            time.sleep(2)
            continue
        else:
            raise RuntimeError(response.text)

if __name__ == '__main__':
    from argparse import ArgumentParser

    PROXY = '/tmp/x509up_u%d' % os.getuid()
    
    parser = ArgumentParser(description = 'Request copy or deletion of datasets and blocks.')
    parser.add_argument('--delete', '-D', action = 'store_true', dest = 'delete', help = 'Request deletions.')
    parser.add_argument('--dataset', '-d', metavar = 'DATASET', dest = 'datasets', nargs = '+', default = [], help = 'Datasets to copy.')
    parser.add_argument('--block', '-b', metavar = 'BLOCK', dest = 'blocks', nargs = '+', default = [], help = 'Blocks to copy.')
    parser.add_argument('--site', '-s', metavar = 'SITE', dest = 'sites', nargs = '+', help = 'Sites to copy to.')
    parser.add_argument('--num-copies', '-n', metavar = 'SITE', dest = 'n', type = int, default = 1, help = 'Sites to copy to.')
    parser.add_argument('--cancel', '-x', metavar = 'ID', dest = 'cancel', help = 'Cancel a copy request.')
    parser.add_argument('--poll', '-l', metavar = 'ID', dest = 'poll', nargs = '?', const = 0, help = 'Check the status of a copy request.')
    parser.add_argument('--status', '-t', metavar = 'STATUS', dest = 'statuses', nargs = '+', help = 'Polling option. Limit to statuses new, activated, completed, rejected, or cancelled')
    parser.add_argument('--user', '-u', metavar = 'USER', dest = 'users', nargs = '+', help = 'Polling option. Limit to requests made by specified users.')
    parser.add_argument('--host', '-o', metavar = 'HOST', dest = 'host', default = socket.gethostname(), help = 'Host name of the dynamo server (ex. example.com).')
    parser.add_argument('--cert', '-c', metavar = 'CERT', dest = 'cert', default = PROXY, help = 'User certificate location.')
    parser.add_argument('--key', '-k', metavar = 'KEY', dest = 'key', default = PROXY, help = 'User certificate key location.')

    args = parser.parse_args()
    sys.argv = []

    try:
        if args.cancel is not None:
            print cancelcopy(args.host, args.cert, args.key, args.cancel)
        else:
            items = args.datasets + args.blocks
        
            if args.poll is not None:
                if args.poll == 0:
                    args.poll = None
                if len(items) == 0:
                    items = None
        
                print pollcopy(args.host, args.cert, args.key, args.poll, items, args.sites, args.statuses, args.users)
        
            else:
                if len(items) == 0:
                    raise RuntimeError('Missing --dataset or --block.')

                if args.sites is None:
                    raise RuntimeError('Missing --site')

                print requestcopy(args.host, args.cert, args.key, items, args.sites, args.n)

    except Exception as ex:
        sys.stderr.write(str(ex) + '\n')
        sys.exit(1)
