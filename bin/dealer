#!/usr/bin/env python

import sys
import os
import logging
import time
import re
import fnmatch

from argparse import ArgumentParser

parser = ArgumentParser(description = 'Dealer')
parser.add_argument('--store', '-i', metavar = 'CLASS', dest = 'store_cls', default = '', help = 'Store backend class.')
parser.add_argument('--site-source', '-s', metavar = 'CLASS', dest = 'site_source_cls', default = '', help = 'SiteInfoSourceInterface class.')
parser.add_argument('--dataset-source', '-t', metavar = 'CLASS', dest = 'dataset_source_cls', default = '', help = 'DatasetInfoSourceInterface class.')
parser.add_argument('--replica-source', '-r', metavar = 'CLASS', dest = 'replica_source_cls', default = '', help = 'ReplicaInfoSourceInterface class.')
parser.add_argument('--copy', '-c', metavar = 'CLASS', dest = 'copy_cls', default = '', help = 'CopyInterface backend class.')
parser.add_argument('--force-inventory-update', '-I', action = 'store_true', dest = 'force_inventory_update', help = 'Force inventory to update.')
parser.add_argument('--comment', '-m', metavar = 'COMMENT', dest = 'comment', help = 'Comment to be sent to deletion interface as well as the local deletion record.')
parser.add_argument('--no-auto-approval', '-P', action = 'store_true', dest = 'no_auto_approval', help = 'Do not approve deletion and transfer requests automatically.')
parser.add_argument('--log-level', '-l', metavar = 'LEVEL', dest = 'log_level', default = '', help = 'Logging level.')
parser.add_argument('--log-file', '-o', metavar = 'PATH', dest = 'log_file', default = '', help = 'Log output file.')
parser.add_argument('--dry-run', '-D', action = 'store_true', dest = 'dry_run', help = 'Do not make any actual copy requests, do not save anything to local storage.')
parser.add_argument('--test-run', '-T', action = 'store_true', dest = 'test_run', help = 'Make a test run (results recorded in local database).')

args = parser.parse_args()
sys.argv = []

for path in ['/var/run/dynamod.pid', '/var/run/dealerd.pid']:
    if os.path.exists(path):
        with open(path) as pidfile:
            if os.getppid() == int(pidfile.read()):
                config.daemon_mode = True

# Need to setup logging before loading other modules

log_level = logging.INFO
if args.log_level:
    try:
        log_level = getattr(logging, args.log_level.upper())
    except AttributeError:
        logging.warning('Log level ' + args.log_level + ' not defined')

if args.log_file:
    logging.basicConfig(filename = args.log_file, filemode = 'a', level = log_level)
else:
    logging.basicConfig(level = log_level)

from common.inventory import InventoryManager
from common.transaction import TransactionManager
from common.demand import DemandManager
from common.dataformat import Site
import common.interface.classes as classes
from dealer.main import Dealer
from dealer.policy import DealerPolicy
from dealer.plugins import plugins

import common.configuration as config
import dealer.configuration as dealer_config

if args.dry_run:
    config.read_only = True

elif not args.comment and not config.daemon_mode:
    print 'Non-dry run from command line requires a comment (-m).'
    sys.exit(1)

kwd = {}
for cls in ['store', 'site_source', 'dataset_source', 'replica_source']:
    clsname = getattr(args, cls + '_cls')
    if clsname == '':
        kwd[cls + '_cls'] = classes.default_interface[cls]
    else:
        kwd[cls + '_cls'] = getattr(classes, clsname)

kwd['load_data'] = False

config.inventory.included_sites = dealer_config.included_sites

inventory_manager = InventoryManager(**kwd)

if args.force_inventory_update:
    inventory_manager.load(load_replicas = False)
else:
    inventory_manager.load(load_replicas = True)

kwd = {}
for cls in ['copy']:
    clsname = getattr(args, cls + '_cls')
    if clsname == '':
        kwd[cls + '_cls'] = classes.default_interface[cls]
    else:
        kwd[cls + '_cls'] = getattr(classes, clsname)

transaction_manager = TransactionManager(**kwd)

kwd = {}
for cls in ['store']:
    clsname = getattr(args, cls + '_cls')
    if clsname == '':
        kwd[cls + '_cls'] = classes.default_interface[cls]
    else:
        kwd[cls + '_cls'] = getattr(classes, clsname)

demand_manager = DemandManager(**kwd)

history = classes.default_interface['history']()

dealer = Dealer(inventory_manager, transaction_manager, demand_manager, history)

# Set up the policy

with open(os.environ['DYNAMO_BASE'] + '/etc/policies.tag') as tag:
    policy_version = tag.read().strip()

group = inventory_manager.groups['AnalysisOps']

policy = DealerPolicy(Site.partitions['AnalysisOps'], group = group, version = policy_version)
policy.target_site_def = lambda s: s.name.startswith('T2_') or (s.name.startswith('T1_') and s.name.endswith('_Disk'))

policy.request_plugins.append(plugins['Popularity'])

balancer = plugins['Balancer']
balancer.history = history
policy.request_plugins.append(balancer)

dealer.set_policy(policy)

if args.force_inventory_update:
    inventory_manager.update()

dealer.run(Site.partitions['AnalysisOps'], is_test = args.test_run, comment = args.comment, auto_approval = not args.no_auto_approval)
