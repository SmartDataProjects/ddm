#!/usr/bin/python

import os
import sys
import hashlib
from argparse import ArgumentParser

from dataformat import Configuration
from common.interface.mysql import MySQL
from common.configuration import common_config

parser = ArgumentParser(description = 'Dynamo')
parser.add_argument('title', metavar = 'TITLE', help = 'Title of the executable.')
parser.add_argument('--executable', '-x', metavar = 'PATH', dest = 'executable', help = 'Executable file.')
parser.add_argument('--user', '-u', metavar = 'USER', dest = 'user', default = '', help = 'User name.')
parser.add_argument('--delete', '-D', action = 'store_true', help = 'Delete entry.')
parser.add_argument('--update', '-U', action = 'store_true', help = 'Overwrite existing entry if there is any.')

args = parser.parse_args()
sys.argv = []

try:
    debug = (os.environ['DYNAMO_SERVER_DEBUG'] == '1')
except:
    debug = False

if not debug:
    if os.geteuid() != 0:
        sys.stderr.write('Root privilege required\n')
        sys.exit(1)

## Read server config (should be readable only to root)
if 'DYNAMO_SERVER_CONFIG' in os.environ:
    config_path = os.environ['DYNAMO_SERVER_CONFIG']
else:
    config_path = '/etc/dynamo/server_config.json'

with open(config_path) as source:
    server_config = Configuration(source)

## Create the registry
registry_db_config = Configuration(common_config.mysql)
registry_db_config.update(server_config.registry.db_params)
registry_db_config['reuse_connection'] = False
registry = MySQL(**registry_db_config)

## Find the user id

if args.user:
    result = registry.query('SELECT `id` FROM `users` WHERE `name` = %s', args.user)
    if len(result) == 0:
        sys.stderr.write('Invalid user %s\n' % args.user)
        sys.exit(1)

    user_id = result[0]
else:
    user_id = 0

## Check for existing entry

existing = registry.query('SELECT COUNT(*) FROM `authorized_executables` WHERE `user_id` = %s AND `title` = %s', user_id, args.title)[0]

## Entry deletion

if args.delete:
    if existing:
        registry.query('DELETE FROM `authorized_executables` WHERE `user_id` = %s AND `title` = %s', user_id, args.title)
        sys.stdout.write('Deleted executable %s' % args.title)
        if user_id != 0:
            sys.stdout.write(' (user %s).\n' % args.user)
        else:
            sys.stdout.write('.\n')
    else:
        sys.stdout.write('Executable %s' % args.title)
        if user_id != 0:
            sys.stdout.write(' (user %s)' % args.user)
        sys.stdout.write(' does not exist.\n')

    sys.exit(0)

## If not deleting, executable must be passed

if not args.executable:
    sys.stderr.write('Missing --executable\n')
    sys.exit(1)

## If entry exists, need --update

if existing and not args.update:
    sys.stderr.write('Executable %s' % args.title)
    if user_id != 0:
        sys.stderr.write(' (user %s)' % args.user)
    sys.stderr.write(' exists (use --update to overwrite).\n')

    sys.exit(1)

## Compute the checksum and insert/update.
    
with open(args.executable) as source:
    checksum = hashlib.md5(source.read()).hexdigest()

sql = 'INSERT INTO `authorized_executables` (`user_id`, `title`, `checksum`) VALUES (%s, %s, UNHEX(%s))'
sql += ' ON DUPLICATE KEY UPDATE `checksum` = VALUES(`checksum`)'
registry.query(sql, user_id, args.title, checksum)

if existing:
    sys.stdout.write('Updated')
else:
    sys.stdout.write('Inserted')

sys.stdout.write(' executable %s' % args.title)
if user_id != 0:
    sys.stdout.write(' (user %s)' % args.user)

sys.stdout.write(': %s\n' % checksum)
