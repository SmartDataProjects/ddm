#!/usr/bin/env python

import os
import sys
import httplib
import urllib
import urllib2
import ssl
import mimetools
import socket
import threading
import traceback
import time
import json

from argparse import ArgumentParser

parser = ArgumentParser(description = 'Submit one dynamo executable task.')
parser.add_argument('cmd', metavar = 'CMD', help = 'Executable command')
parser.add_argument('--asynchronous', '-A', action = 'store_true', dest = 'asynch', help = 'Do not wait for the executable to complete.')
parser.add_argument('--server', '-s', metavar = 'HOST', dest = 'server', help = 'Server host.')
parser.add_argument('--title', '-t', metavar = 'TITLE', dest = 'title', help = 'Executable title.')
parser.add_argument('--write-request', '-W', action = 'store_true', dest = 'write_request', help = 'Request write access.')
parser.add_argument('--work-dir', '-d', metavar = 'PATH', dest = 'workdir', help = 'Working directory. If not set, use a temporary directory.')

args = parser.parse_args()
sys.argv = []

## Server host
if args.server:
    server_host = args.server
else:
    try:
        server_host = os.environ['DYNAMO_SERVER_HOST']
    except KeyError:
        server_host = 'localhost'

if server_host != 'localhost' and server_host != socket.gethostname() and not args.asynch:
    sys.stderr.write('Synchronous execution is not allowed when using a remote server.\n')
    args.asynch = True

## Tools to communicate with the registry frontend.

class HTTPSCertKeyHandler(urllib2.HTTPSHandler):
    """
    HTTPS handler authenticating by x509 user key and certificate.
    """

    def __init__(self):
        urllib2.HTTPSHandler.__init__(self)
        try:
            self.key = os.environ['X509_USER_PROXY']
        except KeyError:
            self.key = '/tmp/x509up_u%d' % os.geteuid()

        if not os.path.exists(self.key):
            LOG.error('HTTPSCertKeyHandler requires an X509 proxy in either')
            LOG.error('1. Environment variable X509_USER_PROXY')
            LOG.error('2. /tmp/x509up_u(uid)')
            raise ConfigurationError('X509 proxy missing')

        self.cert = self.key

        # Switch off server cert verification if the switch is available
        try:
            ssl._https_verify_certificates(False)
        except AttributeError:
            # If the switch does not exist, hope urllib2 doesn't verify the server by default
            pass

    def https_open(self, req):
        return self.do_open(self.create_connection, req)

    def create_connection(self, host, timeout = 300):
        return httplib.HTTPSConnection(host, key_file = self.key, cert_file = self.cert)


def submit_request(query = [], headers = [], data = None):
    url = 'https://%s/registry/application' % server_host
    
    if len(query) != 0:
        url += '?' + urllib.urlencode(query)
    request = urllib2.Request(url)
    request.add_header('Accept', 'application/json')
    for key, value in headers:
        request.add_header(key, value)
    if data:
        request.add_data(data)
    
    # Now submit
    try:
        opener = urllib2.build_opener(HTTPSCertKeyHandler())
        response = opener.open(request)
        content = response.read()
        result = json.loads(content)
    
    except urllib2.HTTPError as err:
        sys.stderr.write('Server responded: Error %d\n' % err.code)
        sys.stderr.write(str(err) + '\n')
        sys.stderr.write(err.read())
        sys.exit(1)

    except ValueError: # json error
        sys.stderr.write('Invalid string received from server (bug!)')
        sys.exit(1)

    return result['data'][0]


## If synchronous execution + work directory provided, wipe out the logs
if not args.asynch:
    # TODO: check server running?

    if args.workdir:
        try:
            os.makedirs(args.workdir)
        except OSError:
            pass
        os.chmod(args.workdir, 0777)
        with open(args.workdir + '/_stdout', 'w'):
            pass
        with open(args.workdir + '/_stderr', 'w'):
            pass

## Find the executable and submit
cmds = args.cmd.split()
executable = cmds[0]
with open(executable) as source:
    file_content = source.read()

boundary = mimetools.choose_boundary()

# The executable file
data = [
    '--' + boundary,
    'Content-Disposition: file; name="file"; filename="exec.py"',
    'Content-Type: text/plain',
    '',
    file_content
]

# Options
def add_field(name, field_data):
    global data

    data += [
        '--' + boundary,
        'Content-Disposition: form-data; name="%s"' % name,
        '',
        field_data
    ]

if args.title:
    add_field('title', args.title)

if len(cmds) > 1:
    add_field('args', ' '.join(cmds[1:]))

if args.write_request:
    add_field('write', '1')

if args.workdir:
    add_field('workdir', args.workdir)

data += [
    '--' + boundary + '--'
]

body = '\r\n'.join(data)

headers = [
    ('Content-type', 'multipart/form-data; boundary=%s' % boundary),
    ('Content-length', len(body))
]

task_info = submit_request(headers = headers, data = body)

## Print out the response
task_id = task_info['taskid']
path = task_info['path']

print 'task id:', task_id
print 'path:', path

if not args.asynch:
    ## Synchronous execution: dynamo_exec will wait until process completion

    def tail_follow(source_path, stream, lock, stop_reading):
        ## tail -f emulation
        while True:
            if os.path.exists(source_path):
                break

            if stop_reading.is_set():
                return

            time.sleep(0.5)

        with open(source_path) as source:
            lock.acquire()
            while True:
                if stop_reading.is_set():
                    lock.release()
                    return

                pos = source.tell()
                line = source.readline()
                if not line:
                    source.seek(pos)
                    lock.release()
                    time.sleep(0.5)
                    lock.acquire()
                else:
                    stream.write(line)

    stop_reading = threading.Event()
    lock = threading.Lock()
    stdout_thread = threading.Thread(target = tail_follow, name = 'stdout', args = (path + '/_stdout', sys.stdout, lock, stop_reading))
    stderr_thread = threading.Thread(target = tail_follow, name = 'stderr', args = (path + '/_stderr', sys.stderr, lock, stop_reading))
    stdout_thread.start()
    stderr_thread.start()

    try:
        return_code = 0

        while True:
            task_info = submit_request(query = [('taskid', task_id)])

            try:
                status = task_info['status']
            except KeyError:
                sys.stderr.write('Failed to fetch task status from server.')
                break

            if status not in ('new', 'run'):
                if status != 'done':
                    return_code = 1

                stop_reading.set()
                stdout_thread.join()
                stderr_thread.join()
                break

            time.sleep(3)

    except KeyboardInterrupt:
        stop_reading.set()
        stdout_thread.join()
        stderr_thread.join()

        while True:
            sys.stdout.write('Kill task? [y/n]: ')
            sys.stdout.flush()
            response = sys.stdin.readline().strip()
            if response == 'y':
                task_info = submit_request(query = [('action', 'kill'), ('taskid', task_id)])

                try:
                    message = task_info['message']
                except KeyError:
                    message = '-- Server message unavailable --'

                sys.stdout.write('\n' + message + '\n')

            elif respose != 'n':
                sys.stdout.write('Please answer in y/n.\n')
                continue

            break

    except:
        stop_reading.set()
        stdout_thread.join()
        stderr_thread.join()

        exc_type, exc, tb = sys.exc_info()
        sys.stderr.write('Caught exception %s while waiting for task to complete.\n' % exc_type.__name__)

        sys.stderr.write('Traceback (most recent call last):\n')
        sys.stderr.write(''.join(traceback.format_tb(tb)) + '\n')
        sys.stderr.write('%s: %s\n' % (exc_type.__name__, str(exc)))
        
        return_code = 2

    sys.exit(return_code)
