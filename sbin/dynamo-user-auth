#!/usr/bin/env python

import os
import sys
from argparse import ArgumentParser

parser = ArgumentParser(description = 'Dynamo server user tools')
parser.add_argument('--user', '-u', metavar = 'USER', dest = 'user', help = 'User name.')
parser.add_argument('--dn', '-n', metavar = 'DN', dest = 'dn', help = 'Add or update the user and link to this DN.')
parser.add_argument('--email', '-m', metavar = 'ADDR', dest = 'email', help = 'Set user email address.')
parser.add_argument('--role', '-r', metavar = 'NAME', dest = 'role', help = 'Role name to authorize the user in.')
parser.add_argument('--target', '-g', metavar = 'NAME', dest = 'target', help = 'Authorization target.')
parser.add_argument('--revoke', '-R', action = 'store_true', dest = 'revoke', help = 'Revoke the authorization.')
parser.add_argument('--list', '-L', action = 'store_true', dest = 'list', help = 'List authorizations')
parser.add_argument('--log-level', '-l', metavar = 'LEVEL', dest = 'log_level', default = 'INFO', help = 'Logging level.')

args = parser.parse_args()
sys.argv = []

## Process option combinations
if not args.list and (not args.user or not args.role):
    print '--user and --role are required if not --list.'
    sys.exit(2)

try:
    debug = (os.environ['DYNAMO_SERVER_DEBUG'] == '1')
except:
    debug = False

if not debug:
    if os.geteuid() != 0:
        sys.stderr.write('Root privilege required\n')
        sys.exit(1)

## Read server config (should be readable only to root)

from dynamo.dataformat import Configuration

try:
    config_path = os.environ['DYNAMO_SERVER_CONFIG']
except KeyError:
    config_path = '/etc/dynamo/server_config.json'

config = Configuration(config_path)

## Create the registry

from dynamo.core.components.master import MasterServer

master_config = config.manager.master
master_server = MasterServer.get_instance(master_config.module, master_config.config)

if args.list:
    print 'USER   ROLE   TARGET'

    targets = [None] + master_server.list_authorization_targets()
    for target in targets:
        if target is None:
            target_name = 'ALL'
        else:
            target_name = target

        for user, role in master_server.list_authorized_users(target):
            if args.user and user != args.user:
                continue
            if args.role and role != args.role:
                continue

            if role is None:
                role_name = 'ANY'
            else:
                role_name = role

            print user, role_name, target_name
            
    sys.exit(0)


if not args.user:
    print 'Missing --user.'
    sys.exit(1)

if args.revoke:
    if master_server.revoke_user_authorization(args.user, args.role, args.target):
        print 'Revoked authorization on %s from user=%s role=%s' % (args.target, args.user, args.role)
        sys.exit(0)
    else:
        print 'No authorization was revoked.'
        sys.exit(0)

# add new authorization
if master_server.identify_user(name = args.user) is None:
    if not args.dn:
        print 'New user; DN is required'
        sys.exit(1)

    response = raw_input('Create new user (%s, %s, %s)? [y/N]' % (args.user, args.dn, args.email))
    if response == 'y':
        master_server.add_user(args.user, args.dn, args.email)
    else:
        sys.exit(0)

if args.role and not master_server.role_exists(args.role):
    response = raw_input('Create new role "%s"? [y/N]' % args.role)
    if response == 'y':
        master_server.add_role(args.role)
    else:
        sys.exit(0)
        
if master_server.authorize_user(args.user, args.role, args.target):
    print 'Authorized user=%s role=%s for %s.' % (args.user, args.role, args.target)
