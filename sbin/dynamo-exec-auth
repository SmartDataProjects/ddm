#!_PYTHON_

import os
import sys
import hashlib
from argparse import ArgumentParser

parser = ArgumentParser(description = 'Dynamo')
parser.add_argument('--title', '-t', metavar = 'TITLE', dest = 'title', nargs = '+', help = 'Title of the executable.')
parser.add_argument('--executable', '-x', metavar = 'PATH', dest = 'executable', nargs = '+', help = 'Executable file.')
parser.add_argument('--user', '-u', metavar = 'USER', dest = 'user', nargs = '+', help = 'User name.')
parser.add_argument('--delete', '-D', action = 'store_true', help = 'Delete entry.')
parser.add_argument('--list', '-L', action = 'store_true', help = 'List existing entries.')

args = parser.parse_args()
sys.argv = []

try:
    debug = (os.environ['DYNAMO_SERVER_DEBUG'] == '1')
except:
    debug = False

if not debug:
    if os.geteuid() != 0:
        sys.stderr.write('Root privilege required\n')
        sys.exit(1)

## Read server config (should be readable only to root)

from dynamo.dataformat import Configuration

config_path = os.getenv('DYNAMO_SERVER_CONFIG', '/etc/dynamo/server_config.json')
config = Configuration(config_path)

if 'applications' not in config or not config.applications.enabled:
    sys.stderr.write('This host is not an application server.\n')
    sys.exit(1)

## Connect to the master server

from dynamo.core.components.master import MasterServer

master_config = config.manager.master
master = MasterServer.get_instance(master_config.module, master_config.config)

## Find the user id

if args.user:
    for user in args.user:
        if not master.authorizer.user_exists(user):
            sys.stderr.write('Invalid user %s\n' % args.user)
            sys.exit(1)

authorized_apps = {}
for title, user, checksum in master.appmanager.list_authorized_applications(titles = args.title, users = args.user):
    authorized_apps[(title, user)] = checksum

if args.list:
    if args.executable:
        selected = []
        for ex in args.executable:
            with open(ex) as source:
                checksum = hashlib.md5(source.read()).hexdigest()

            for key, value in authorized_apps.items():
                if value == checksum:
                    selected.append(key)

        new_apps = {}
        for key in selected:
            new_apps[key] = authorized_apps[key]

        authorized_apps = new_apps
   
    print '%10s  %10s' % ('TITLE', 'USER')
    for title, user in sorted(authorized_apps.keys()):
        if user is None:
            user = 'ALL'
        print '%10s  %10s' % (title, user)

    sys.exit(0)

## Entry deletion

if args.delete:
    if not args.user and not args.title:
        sys.stderr.write('Need --user or --title to delete.')
        sys.exit(1)

    revoke_list = []
    for title, user in authorized_apps.keys():
        if args.title is not None and title not in args.title:
            continue
        if args.user is not None and user not in args.user:
            continue

        revoke_list.append((title, user))

    for title, user in revoke_list:
        success = master.appmanager.revoke_application_authorization(title, user)
        if user is None:
            user = 'ALL'

        if success:
            sys.stdout.write('Deleted executable %s (user %s).\n' % (title, user))
        else:
            sys.stderr.write('Failed to delete executable %s (user %s).\n' % (title, user))
            sys.exit(1)

    sys.exit(0)

## If not deleting, executable must be passed

if args.executable is None:
    sys.stderr.write('Missing --executable\n')
    sys.exit(1)

if len(args.executable) != 1:
    sys.stderr.write('Only one executable can be authorized at a time.\n')
    sys.exit(1)

if args.title is None:
    sys.stderr.write('Missing --title\n')
    sys.exit(1)

if len(args.title) != 1:
    sys.stderr.write('Only one title can be given.\n')
    sys.exit(1)

title = args.title[0]

## Compute the checksum and insert/update.
    
with open(args.executable[0]) as source:
    checksum = hashlib.md5(source.read()).hexdigest()

if args.user is None:
    users = [None]
else:
    users = args.user

for user in users:
    if user is None:
        user_name = 'ALL'
    else:
        user_name = user

    try:
        existing = authorized_apps[(title, user)]
        if existing == checksum:
            sys.stdout.write('Executable %s (user %s) is already authorized.\n' % (title, user_name))
        else:
            success = master.appmanager.revoke_application_authorization(title, user)
            if success:
                raise KeyError()
            else:
                sys.stderr.write('Failed to update authorization of executable %s (user %s).\n' % (title, user_name))
                sys.exit(1)

    except KeyError:
        success = master.appmanager.authorize_application(title, checksum, user)
        if success:
            sys.stdout.write('Authorized executable %s (user %s).\n' % (title, user_name))
        else:
            sys.stderr.write('Failed to authorize executable %s (user %s).\n' % (title, user_name))
            sys.exit(1)
