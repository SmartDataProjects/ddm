#!/usr/bin/env python

import os
import sys
import pwd
import signal
import traceback
import logging
import logging.handlers

## Read server config (should be readable only to root)
from dynamo.dataformat import Configuration

try:
    config_path = os.environ['DYNAMO_SERVER_CONFIG']
except KeyError:
    config_path = '/etc/dynamo/server_config.json'

config = Configuration(config_path)

## Set up logging (write to stderr unless path is given)
log_level = getattr(logging, config.logging.level.upper())
log_format = '%(asctime)s:%(levelname)s:%(name)s: %(message)s'

LOG = logging.getLogger()
LOG.setLevel(log_level)
if config.logging.get('path', ''):
    log_handler = logging.handlers.RotatingFileHandler(config.logging.path + '/server.log', maxBytes = 1000000, backupCount = 100)
else:
    log_handler = logging.StreamHandler()
LOG.addHandler(log_handler)

# Print some nice logo before we start logging with the timestamp format
LOG.critical('''
+++++++++++++++++++++++++++++++++++++
++++++++++++++ DYNAMO +++++++++++++++
++++++++++++++  v2.0  +++++++++++++++
+++++++++++++++++++++++++++++++++++++
''')

log_handler.setFormatter(logging.Formatter(fmt = log_format))

# Logger specific for object update reports from the server
changelog = logging.getLogger('changelog')
changelog.setLevel(logging.INFO)
if config.logging.get('path', ''):
    log_handler = logging.handlers.RotatingFileHandler(config.logging.path + '/updates.log', maxBytes = 1000000, backupCount = 100)
else:
    log_handler = logging.StreamHandler()
log_handler.setFormatter(logging.Formatter(fmt = '%(asctime)s: %(message)s'))
changelog.addHandler(log_handler)
changelog.propagate = False

## Set the effective user id to config.user
os.seteuid(pwd.getpwnam(config.user).pw_uid)

## Catch SIGTERM and raise a KeyboardInterrupt (so kill to the server process
## raises the exception)
from dynamo.utils.signaling import SignalConverter

signal_converter = SignalConverter(logger = LOG)
signal_converter.set(signal.SIGTERM)

## Start the server
from dynamo.core.dynamo import Dynamo

try:
    daemon = Dynamo(config)
    daemon.run()

except:
    exc_type, exc, tb = sys.exc_info()
    LOG.critical('Server caught an exception of type %s\n', exc_type.__name__)
    log_handler.setFormatter(logging.Formatter(fmt = '%(message)s'))

    LOG.critical('Traceback (most recent call last):')
    LOG.critical(''.join(traceback.format_tb(tb)))
    LOG.critical('%s: %s', exc_type.__name__, str(exc))

    sys.exit(1)
