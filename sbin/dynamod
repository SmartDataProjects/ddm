#!/usr/bin/env python

import os
import sys
import pwd
import signal
import time
import threading
import logging
import logging.handlers

## Read server config (should be readable only to root)
from dynamo.dataformat import Configuration
import dynamo.core.server as main

try:
    config_path = os.environ['DYNAMO_SERVER_CONFIG']
except KeyError:
    config_path = '/etc/dynamo/server_config.json'

config = Configuration(config_path)

## Set up logging (write to stderr unless path is given)
log_level = getattr(logging, config.logging.level.upper())
log_format = '%(asctime)s:%(levelname)s:%(name)s: %(message)s'

LOG = logging.getLogger()
LOG.setLevel(log_level)
if config.logging.get('path', ''):
    log_handler = logging.handlers.RotatingFileHandler(config.logging.path + '/server.log', maxBytes = 10000000, backupCount = 100)
else:
    log_handler = logging.StreamHandler()
LOG.addHandler(log_handler)

## Print some nice banner before we start logging with the timestamp format
LOG.critical(main.serverutils.BANNER)

log_handler.setFormatter(logging.Formatter(fmt = log_format))

## Logger specific for object update reports from the server
changelog = logging.getLogger('changelog')
changelog.propagate = False
changelog.setLevel(logging.INFO)
if config.logging.get('path', ''):
    log_handler = logging.handlers.RotatingFileHandler(config.logging.path + '/updates.log', maxBytes = 10000000, backupCount = 100)
else:
    log_handler = logging.StreamHandler()
changelog.addHandler(log_handler)

changelog.critical(main.serverutils.BANNER)

log_handler.setFormatter(logging.Formatter(fmt = '%(asctime)s: %(message)s'))

## Start the servers

from dynamo.utils.log import log_exception

try:
    server = None
    srv_thread = None

    ## Import the web server (die here if ill-configured)
    if config.web.enabled:
        from dynamo.web.server import WebServer
    
    ## Start the server (read restricted files (e.g. private keys) here before we switch euid)
    server = main.DynamoServer(config)

    ## Set the effective user id to config.user
    try:
        pwnam = pwd.getpwnam(config.user)
        os.setegid(pwnam.pw_gid)
        os.seteuid(pwnam.pw_uid)
    except OSError:
        LOG.warning('Cannot switch uid to %s (%d).', config.user, pwd.getpwnam(config.user).pw_uid)

    # server.run can send a SIGHUP before the web server starts if inventory load is quick
    # Need to start ignoring here already
    signal.signal(signal.SIGHUP, signal.SIG_IGN)
    
    # Loop with server status check, update, and application execution (if enabled)
    srv_thread = threading.Thread(target = server.run)
    srv_thread.start()
    
    if config.web.enabled:
        # flup preforkserver forgets to stop an alarm
        def do_nothing_on_alarm(signum, frame):
            pass

        signal.signal(signal.SIGALRM, do_nothing_on_alarm)

        config.web.modules_config = Configuration(config.web.modules_config_path)
        config.web.pop('modules_config_path')
    
        web = WebServer(config.web, server)
        web.start()
    
    else:
        # WSGIServer intercepts INT, TERM, and HUP so we do the same here
        # HUP is already ignored above
        # Convert SIGTERM into KeyboardInterrupt (SIGINT already is)
        from dynamo.utils.signaling import SignalConverter
        signal_converter = SignalConverter(logger = LOG)
        signal_converter.set(signal.SIGTERM)

        # Now just wait for the signal
        signal.pause()

except KeyboardInterrupt:
    pass
except:
    log_exception(LOG)
finally:
    if server:
        server.shutdown()
    if srv_thread:
        srv_thread.join()
