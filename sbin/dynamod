#!/usr/bin/env python

import os
import sys
import pwd
import signal
import traceback
import threading
import logging
import logging.handlers

## Read server config (should be readable only to root)
from dynamo.dataformat import Configuration

try:
    config_path = os.environ['DYNAMO_SERVER_CONFIG']
except KeyError:
    config_path = '/etc/dynamo/server_config.json'

config = Configuration(config_path)

## Set up logging (write to stderr unless path is given)
log_level = getattr(logging, config.logging.level.upper())
log_format = '%(asctime)s:%(levelname)s:%(name)s: %(message)s'

LOG = logging.getLogger()
LOG.setLevel(log_level)
if config.logging.get('path', ''):
    log_handler = logging.handlers.RotatingFileHandler(config.logging.path + '/server.log', maxBytes = 10000000, backupCount = 100)
else:
    log_handler = logging.StreamHandler()
LOG.addHandler(log_handler)

# Print some nice logo before we start logging with the timestamp format
LOG.critical('''
+++++++++++++++++++++++++++++++++++++
++++++++++++++ DYNAMO +++++++++++++++
++++++++++++++  v2.0  +++++++++++++++
+++++++++++++++++++++++++++++++++++++
''')

log_handler.setFormatter(logging.Formatter(fmt = log_format))

# Logger specific for object update reports from the server
changelog = logging.getLogger('changelog')
changelog.propagate = False
changelog.setLevel(logging.INFO)
if config.logging.get('path', ''):
    log_handler = logging.handlers.RotatingFileHandler(config.logging.path + '/updates.log', maxBytes = 10000000, backupCount = 100)
else:
    log_handler = logging.StreamHandler()
changelog.addHandler(log_handler)

changelog.critical('''
+++++++++++++++++++++++++++++++++++++
++++++++++++++ DYNAMO +++++++++++++++
++++++++++++++  v2.0  +++++++++++++++
+++++++++++++++++++++++++++++++++++++
''')

log_handler.setFormatter(logging.Formatter(fmt = '%(asctime)s: %(message)s'))

## Set the effective user id to config.user
try:
    pwnam = pwd.getpwnam(config.user)
    os.setegid(pwnam.pw_gid)
    os.seteuid(pwnam.pw_uid)
except OSError:
    LOG.warning('Cannot switch uid to %s (%d).', config.user, pwd.getpwnam(config.user).pw_uid)

## Catch SIGTERM and raise a KeyboardInterrupt (so kill to the server process
## raises the exception)
from dynamo.utils.signaling import SignalConverter

signal_converter = SignalConverter(logger = LOG)
signal_converter.set(signal.SIGTERM)

## Start the server
from dynamo.core.server import DynamoServer
from dynamo.core.manager.base import ServerManager

server = Dynamo(config)
server.load_inventory()

if config.serve_web:
    from dynamo.web.server import WebServer
    from flup.server.fcgi import WSGIServer

    web = WebServer(config.web, server)
    # Thread-based WSGI server
    WSGIServer(web.main, bindAddress = config.web.socket, umask = 0).run()

# Start the loop of loops
# If the server dies out of error, status will not be INITIAL and we get ouf of
# the loop.
# If the server on the other hand goes out of sync with the rest of servers,
# it will try to reset itself by setting the status to INITIAL. In this case
# we reload the inventory and restart.

while True:
    if config.serve_applications:
        server.serve_applications()
    else:
        server.wait_for_signal()

    if server.manager.status == ServerManager.SRV_INITIAL:
        server.load_inventory()
    else:
        # Server is shutting down either in online or error state
        server.manager.disconnect()
        break
