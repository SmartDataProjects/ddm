#!/usr/bin/env python

import sys
import os
from ConfigParser import ConfigParser

sys.dont_write_bytecode = True

source_conf = ConfigParser()
source_conf.read(sys.argv[1])

server_user = source_conf.get('server', 'user')
email = source_conf.get('server', 'email')
persistency_mod = source_conf.get('server', 'store')
persistency_conf_args = source_conf.get('server', 'store_conf')
master_mod = source_conf.get('server', 'master')
master_conf_args = source_conf.get('server', 'master_conf')
local_board_mod = source_conf.get('server', 'local_board')
local_board_conf_args = source_conf.get('server', 'local_board_conf')
logdir = source_conf.get('paths', 'log_path')

serve_applications = source_conf.get('applications', 'enabled').lower()
serve_web = source_conf.get('web', 'enabled').lower()

class Namespace(object):
    pass

ns = Namespace()

conf_gen_script = persistency_mod + '/generate_store_conf.py'
execfile(conf_gen_script, {'__file__': os.path.realpath(conf_gen_script), '__namespace__': ns})

conf_gen_script = master_mod + '/generate_master_conf.py'
execfile(conf_gen_script, {'__file__': os.path.realpath(conf_gen_script), '__namespace__': ns})

conf_gen_script = local_board_mod + '/generate_local_board_conf.py'
execfile(conf_gen_script, {'__file__': os.path.realpath(conf_gen_script), '__namespace__': ns})
local_board_conf = 

conf_str = '''{
  "user": "''' + server_user + '''",
  "inventory": {
  "persistency": {'''

conf_str += ns.generate_store_conf(persistency_conf_args)

conf_str += '''
    },
    "partition_def_path": "$(DYNAMO_POLICIES)/partitions.txt"
  },
  "manager": {
    "master": {'''

conf_str += ns.generate_master_conf(master_conf_args)

conf_str += '''
    },
    "board": {'''

conf_str += ns.generate_local_board_conf(local_board_conf_args)

conf_str += '''
    }
  },
  "notification_recipient": "''' + email + '''",
  "status_poll_interval": 1.0,
  "applications": {
    "enabled": ''' + serve_applications

if serve_applications == 'true':
    conf_str += ''',
    "certfile": "''' + source_conf.get('applications', 'certfile') + '''",
    "keyfile": "''' + source_conf.get('applications', 'keyfile') + '",'

    capath = source_conf.get('applications', 'capath')
    if os.path.isdir(capath):
        import ssl
        if not hasattr(ssl, 'SSLContext'):
            # This python version is old and cannot use capath directory
            sys.stderr.write('SSL module in this python version cannot handle a capath directory.\n')
            sys.stderr.write('Please provide a single file with all CA certificates concatenated.\n')
            raise RuntimeError('Invalid capath')

        conf_str += '''
    "capath": "''' + capath + '"'
    else:
        conf_str += '''
    "cafile": "''' + capath + '"'

conf_str += '''
  },
  "web": {
    "enabled": ''' + serve_web

if serve_web == 'true':
    conf_str += ''',
    "socket": "''' + source_conf.get('web', 'socket') + '"'

conf_str += '''
  },
  "logging": {
    "level": "info",
    "path": "''' + logdir + '''",
    "changelog": true
  }
}
'''

print conf_str
