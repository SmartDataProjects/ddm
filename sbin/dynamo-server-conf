#!/usr/bin/env python

import sys
import os
from collections import OrderedDict as OD
import json
from ConfigParser import ConfigParser

source_conf = ConfigParser()
source_conf.read(sys.argv[1])

server_user = source_conf.get('server', 'user')
email = source_conf.get('server', 'email')
persistency_mod = source_conf.get('server', 'store')
persistency_conf_args = source_conf.get('server', 'store_conf')
master_mod = source_conf.get('server', 'master')
master_conf_args = source_conf.get('server', 'master_conf')
shadow_mod = source_conf.get('server', 'shadow')
shadow_conf_args = source_conf.get('server', 'shadow_conf')
local_board_mod = source_conf.get('server', 'local_board')
local_board_conf_args = source_conf.get('server', 'local_board_conf')
logdir = source_conf.get('paths', 'log_path')
spooldir = source_conf.get('paths', 'spool_path')

serve_applications = source_conf.get('applications', 'enabled').lower()
serve_web = source_conf.get('web', 'enabled').lower()
serve_fileop = source_conf.get('file_operations', 'enabled').lower()

class Namespace(object):
    pass

generators = {}

install_source_path = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

for mod in [persistency_mod, master_mod, shadow_mod, local_board_mod]:
    if mod not in generators:
        generators[mod] = Namespace()
        conf_gen_script = install_source_path + '/' + mod + '/generate_conf.py'
        execfile(conf_gen_script, {'__file__': os.path.realpath(conf_gen_script), '__namespace__': generators[mod]})

# Write JSON from a dictionary with indentation. From dataformat.configuration.
def dump_with_indent(cont, idt):
    try:
        keys = cont.keys()
    except AttributeError:
        return json.dumps(cont)
    else:
        if len(keys) == 0:
            return '{}'
        else:
            js = '{\n'

            cont_lines = []
            for key in keys:
                line = ' ' * (idt + 2)
                line += '"%s": %s' % (key, dump_with_indent(cont[key], idt + 2))
                cont_lines.append(line)

            js += ',\n'.join(cont_lines)
            js += '\n' + (' ' * idt) + '}'
            return js

server_conf = OD()

server_conf['user'] = server_user

server_conf['inventory'] = OD()
server_conf['inventory']['persistency'] = generators[persistency_mod].generate_store_conf(persistency_conf_args)
server_conf['inventory']['partition_def_path'] = source_conf.get('server', 'partition_def')

server_conf['manager'] = OD()
server_conf['manager']['master'] = generators[master_mod].generate_master_conf(master_conf_args)
server_conf['manager']['shadow'] = generators[shadow_mod].generate_master_conf(shadow_conf_args)
server_conf['manager']['board'] = generators[local_board_mod].generate_local_board_conf(local_board_conf_args)

## WebServer
server_conf['web'] = OD()
server_conf['web']['enabled'] = (serve_web == 'true')

if serve_web == 'true':
    web_conf = server_conf['web']
    web_conf['socket'] = source_conf.get('web', 'socket')
    web_conf['contents_path'] = source_conf.get('web', 'contents_path')
    web_conf['modules_config_path'] = source_conf.get('web', 'modules_config')
    web_conf['min_idle'] = 1
    web_conf['max_idle'] = 5
    web_conf['max_procs'] = 10

## AppServer and application defaults
server_conf['applications'] = OD()
server_conf['applications']['enabled'] = (serve_applications == 'true')

if serve_applications == 'true':
    app_conf = server_conf['applications']
    app_conf['server'] = OD()
    app_conf['server']['module'] = source_conf.get('applications', 'server')
    app_conf['server']['config'] = json.loads(source_conf.get('applications', 'server_conf'))

    defaults_path = source_conf.get('applications', 'defaults_conf')
    if not defaults_path.startswith('/'):
        defaults_path = os.path.dirname(os.path.realpath(sys.argv[1])) + '/' + defaults_path

    with open(defaults_path) as source:
        try:
            app_conf['defaults'] = OD(json.loads(source.read()))
        except:
            sys.stderr.write('Failed to parse %s\n' % defaults_path)
            raise

    app_conf['timeout'] = 7200
    app_conf['retain_records_for'] = 7

## RLFSM
server_conf['file_operations'] = OD()
server_conf['file_operations']['enabled'] = (serve_fileop == 'true')

if serve_fileop == 'true':
    server_conf['file_operations']['manager'] = generators['mysql'].generate_fom_conf(source_conf.get('file_operations', 'fom_conf'))
    transfer_conf = server_conf['file_operations']['manager']['transfer']

    backend = source_conf.get('file_operations', 'backend')
    if backend == 'standalone':
        transfer_conf['module'] = 'standalone:StandaloneFileOperation'
        transfer_conf['config']['batch_size'] = 200
    elif backend == 'fts':
        transfer_conf['module'] = 'fts:FTSFileOperation'
        transfer_conf['config']['batch_size'] = 4000

    server_conf['file_operations']['daemon'] = json.loads(source_conf.get('file_operations', 'fod_conf'))

server_conf['notification_recipient'] = email
server_conf['status_poll_interval'] = 1.0

server_conf['logging'] = OD({
    'level': 'info',
    'path': logdir,
    'changelog': True
})

print dump_with_indent(server_conf, 0)
