[paths]
## Common paths

# Install target directory
dynamo_base=/usr/local/dynamo

# Configuration directory
config_path=/etc/dynamo

# Temporary working directory
spool_path=/var/spool/dynamo

# Server log directory
log_path=/var/log/dynamo

# Archival directory
archive_path=/local/data/dynamo

# Location of the policy package
policy_path=/usr/local/dynamo-policies

# Location of the client executable
client_path=/usr/local/bin

[server]
## Dynamo server configuration

# User under which dynamo runs
user=dynamo

# Email address to send server notifications to
email=

# Server persistency store technology (leave blank if not running store)
store=mysql

# Store configuration to be passed to $store/generate_conf.py
store_conf={"host": "localhost", "user": "dynamosrv", "readuser": "dynamoread"}

# Master server technology
master=mysql

# Configuration to be passed to $master/generate_conf.py
master_conf={"host": "localhost", "user": "dynamosrv", "readuser": "dynamoread"}

# Master server shadow technology
shadow=mysql

# Configuration to be passed to $shadow/generate_conf.py
shadow_conf={"host": "localhost", "user": "dynamosrv"}

# Server update board technology
local_board=mysql

# Configuration to be passed to $local_board/generate_local_board_conf.py
local_board_conf={"host": "localhost", "user": "dynamosrv"}

# Location of the partition definition
partition_def=$(DYNAMO_BASE)/etc/default_partitions.txt

# Path to the default configuration file for common tools (relative to this file)
defaults_conf=defaults.json

[applications]
## Dynamo application server configuration

# Whether to run an application server
enabled=true

# AppServer class name
server=socketappserver:SocketAppServer

# SocketAppServer server uses an OpenSSL socket to receive requests
#  certfile: Server certificate (can be self-signed)
#  keyfile: Server private key (can be self-signed)
#  capath: CA path for client authentication (can be a directory in python 2.7; otherwise a single file with all CA certs concatenated)
# Cert and key files here can be generated with /etc/pki/tls/certs/make-dummy-cert if you have openssl installed in Red Hat
server_conf={"workarea_base": "$(DYNAMO_SPOOL)/work",
             "scheduler_base": "$(DYNAMO_SPOOL)/scheduler",
             "certfile": "/etc/pki/tls/certs/localhost.crt",
             "keyfile": "/etc/pki/tls/certs/localhost.crt",
             "capath": "/etc/pki/tls/certs/ca-bundle.crt"}

[web]
## Dynamo web server (backend) configuration

# Whether to run a web interface
enabled=true

# Path to the UNIX socket used to communicate with the http fronend
socket=/var/spool/dynamo/dynamoweb.sock

# Path to load the static contents (HTML, CSS, JS) from
contents_path=/usr/local/dynamo/web

# Path to the configuration file for web modules
modules_config=/etc/dynamo/web_modules_config.json

[file_operations]
## File operation management

# Whether to transfer and delete files by ourselves
enabled=true

# File operation methods (standalone: direct gfal-* calls, fts: through FTS)
backend=standalone

# Configuration JSON for the File Operations Manager
fom_conf={"db": {"user": "dynamofod"}, "transfer": {}}

# Configuration JSON for the File Operations Daemon (empty if backend=fts)
#  max_parallel_links: Maximum number of concurrent operations within each batch
#  transfer_timeout: Timeout for individual transfers (seconds)
fod_conf={"max_batches": 50, "max_parallel_links": 200, "transfer_timeout": 3600}

# Alternative file operations configuration
#backend=fts
#fom_conf={"db": {"user": "dynamofod"}, "transfer": {"fts_server": "https://fts3.example.com:8446", "fts_retry": 3}}
#fod_conf={}
