#!/usr/bin/env python

import sys
import logging
import time
import tempfile
import shutil
from argparse import ArgumentParser

parser = ArgumentParser(description = 'Update site status.')
parser.add_argument('--config', '-c', metavar = 'CONFIG', dest = 'config', default = '', help = 'Configuration JSON.')
parser.add_argument('--log-level', '-l', metavar = 'LEVEL', dest = 'log_level', default = 'INFO', help = 'Logging level.')

args = parser.parse_args()
sys.argv = []

## Type of update
rolling_update = (not args.dataset)

## Load the configuration
from dataformat import Configuration

config = Configuration(args.config)

## Set up logging (write to stdout)
log_level = getattr(logging, config.log_level.upper())
log_format = '%(asctime)s:%(levelname)s:%(name)s: %(message)s'

# Everything above log_level goes to stdout
out_handler = logging.StreamHandler(sys.stdout)
out_handler.setLevel(log_level)
out_handler.setFormatter(logging.Formatter(fmt = log_format))
# If >= ERROR, goes also to stderr
err_handler = logging.StreamHandler(sys.stderr)
err_handler.setLevel(logging.ERROR)
err_handler.setFormatter(logging.Formatter(fmt = log_format))

LOG = logging.getLogger()
LOG.setLevel(log_level)
LOG.addHandler(out_handler)
LOG.addHandler(err_handler)

## Load and initialize sources
from core.executable import inventory
import source.impl as sources

config.sites.config.phedex = config.phedex

site_source = sources.PhEDExSiteInfoSource(config.sites.config)

## Start the update

for site in inventory.sites:
    current_status = site_source.get_site_status(site.name)
    if current_status != site.status:
        site.status = current_status
        inventory.update(site)

LOG.info('Site update completed.')
