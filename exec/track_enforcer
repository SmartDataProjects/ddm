#!/usr/bin/env python

###############################################################
####### This script will spit out png files monitoring ########
####### the copy status through Phedex on three levels: #######
####### -per replica, -per request, -per site #################
#
####### yiiyama@mit.edu, bmaier@mit.edu #######################
###############################################################

import sys
import os
import time
import shutil
import rrdtool
import selinux
import csv

from datetime import datetime, timedelta

from argparse import ArgumentParser

parser = ArgumentParser(description = 'Track enforcer rules')
parser.add_argument('--config', '-c', metavar = 'CONFIG', dest = 'config', required = True, help = 'Configuration JSON for dealermon-like programs.')

args = parser.parse_args()
sys.argv = []

from dynamo.dataformat import Configuration
from dynamo.core.executable import inventory, authorized, make_standard_logger
from dynamo.enforcer.interface import EnforcerInterface

## Configuration for steering tracking (intervals, output directories, etc)

config = Configuration(args.config)

## Create an enforcer instance

enforcer_config = Configuration(config.enforcer_config)
enforcer_config['write_rrds'] = True
enforcer = EnforcerInterface(enforcer_config)

## Logger

LOG = make_standard_logger(config.get('log_level', 'info'))

## Paths

rrd_dir = config.rrd_path_base + '/track_enforcer'

if authorized:
    try:
        os.makedirs(rrd_dir)
    except OSError:
        pass

## RRD functions

interval = int(config.rrd_interval)

def create_rrd(path):
    if not authorized:
        return

    start = (int(time.time()) / interval - 1) * interval

    rrdtool.create(path, '--start', str(start), '--step', str(interval),
                   'DS:missing:GAUGE:%d:0:U' % (interval * 800),
                   'DS:enroute:GAUGE:%d:0:U' % (interval * 800),
                   'DS:there:GAUGE:%d:0:U' % (interval * 800),
                   'RRA:LAST:0:1:%i' % 28400)

    # data source
    #  DS:<name>:<type>:<heartbeat>:<min>:<max>
    #  type = GAUGE: quantity that has a value at each time point
    #  heartbeat: "maximum number of seconds that may pass between two updates of this
    #              data source before the value of the data source is assumed to be *UNKNOWN*"
    #  min/max = U: unknown
    # round robin archive (RRA)
    #  RRA:<type>:<xff>:<nsteps>:<nrows>
    #  type = LAST: just use the last value, no averaging etc.
    #  xff: fraction of <nsteps> that can have UNKNOWN as the value
    #  nsteps: number of steps used for calculation
    #  nrows: number of records to keep

    # change selinux context of the RRD so that it can be read by a apache-invoked PHP script
    try:
        selinux.chcon(path, 'unconfined_u:object_r:httpd_sys_content_t:s0')
    except:
        pass

## Get all enforcer rules' statuses

rrd_info = enforcer.report_back(inventory)


for rule_name, already_there, en_route, still_missing in rrd_info:
    
    rrd_file = '%s/%s.rrd' % (rrd_dir, rule_name)

    if authorized and not os.path.exists(rrd_file):
        # RRD does not exist yet
        LOG.info('Creating RRD file %s', rrd_file)
        create_rrd(rrd_file)

    # Update the RRD file
    timestamp = int(time.time()) / interval * interval

    try:
        lasttime = rrdtool.last(rrd_file)
    except:
        lasttime = 0

    if authorized and timestamp > lasttime:
        rrdtool.update(rrd_file, '%d:%i:%i:%i' % (timestamp, len(still_missing), len(en_route), len(already_there)))
        LOG.info("rrdfile %s updated" % rrd_file)

        enroute_csv = rrd_dir + '/%s_enroute.csv' % rule_name 
        with open(enroute_csv,'w') as csvfile:
            fieldnames = ['replica', 'site', 'there', 'total']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            try:
                writer.writeheader()
            except AttributeError:
                # Python 2.6
                csvfile.write('replica,site,there,total\n')
                
            for key, value in en_route.items():
                replica = key.split('__')[0]
                site = key.split('__')[1]
                size_there = int(value.split('__')[0])
                size_total = int(value.split('__')[1])
                writer.writerow({'replica': replica, 'site': site, 'there': size_there, 'total': size_total})

        missing_csv = rrd_dir + '/%s_missing.csv' % rule_name 
        with open(missing_csv,'w') as csvfile:
            fieldnames = ['replica', 'size']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            try:
                writer.writeheader()
            except AttributeError:
                csvfile.write('replica,size\n')

            for key, value in still_missing.items():
                writer.writerow({'replica': key, 'size': value})
