#!/usr/bin/env python

import os
import sys
from argparse import ArgumentParser

parser = ArgumentParser(description = 'Update subscriptions.')
parser.add_argument('--config', '-c', metavar = 'CONFIG', dest = 'config', help = 'Configuration JSON.')

args = parser.parse_args()
sys.argv = []

## Load the configuration
from dynamo.dataformat.configuration import Configuration

config = Configuration(args.config)

## Set up logging (write to stdout & stderr)
from dynamo.core.executable import make_standard_logger, read_only, inventory

LOG = make_standard_logger(config.get('log_level', 'info'))

## Set up a handle to the RLFSM
from dynamo.fileop.rlfsm import RLFSM

rlfsm = RLFSM(config.get('rlfsm', None))

if read_only:
    rlfsm.set_read_only()

## Set up a handle to the registry
from dynamo.registry.registry import RegistryDatabase

registry = RegistryDatabase()

## Run
from dynamo.dataformat import File

LOG.info('Updating the inventory from injections.')

if not read_only:
    registry.db.lock_tables(write = ['data_injections'])

n_injected = 0
n_deleted = 0

for cmd, objstr in registry.db.xquery('SELECT `cmd`, `obj` FROM `data_injections` ORDER BY `id`'):
    obj = inventory.make_object(objstr)

    if cmd == 'update':
        embedded_obj = inventory.update(obj)
        n_injected += 1

        if type(obj) is File:
            block = embedded_obj.block
            for replica in block.replicas:
                rlfsm.subscribe_files(replica.site, embedded_obj)

    elif cmd == 'delete':
        inventory.delete(obj)
        n_deleted += 1

if not read_only:
    registry.db.query('DELETE FROM `data_injections`')
    registry.db.query('ALTER TABLE `data_injections` AUTO_INCREMENT = 1')

    registry.db.unlock_tables()

LOG.info('Injected %d objects and deleted %d objects.', n_injected, n_deleted)

LOG.info('Updating the inventory from transfers and deletions.')

subscriptions = rlfsm.get_subscriptions(inventory)

by_replica = {}
replicas_to_update = set()
done_ids = []

for sub in subscriptions:
    if type(sub) is RLFSM.Subscription:
        optype == 'transfer'
    else:
        optype == 'deletion'

    LOG.debug('Subscription entry: %d, %s, %s, %s, %s', sub.id, sub.status, optype, sub.file.lfn, sub.destination.name)

    replica = sub.file.block.find_replica(sub.destination)

    if replica is None:
        # unexpected file! -> mark the subscription for deletion and move on
        if status == 'done':
            done_ids.append(sub.id)
            continue

    try:
        file_ids, projected = by_replica[replica]
    except KeyError:
        file_ids, projected = by_replica[replica] = (set(), set())

        if replica.file_ids is None:
            # this replica is already full
            file_ids = set(f.id for f in replica.block.files)
        else:
            file_ids = set(replica.file_ids)
        
    if type(sub) is RLFSM.Subscription:
        if sub.status == 'done':
            file_ids.add(sub.file.id)
        elif sub.status != 'cancelled':
            projected.add(sub.file.id)

    else:
        if sub.status != 'cancelled':
            try:
                projected.remove(sub.file.id)
            except KeyError:
                pass

        if sub.status == 'done':
            try:
                file_ids.remove(sub.file.id)
            except KeyError:
                pass

    if sub.status == 'done':
        replicas_to_update.add(replica)
        done_ids.append(sub.id)

for replica in replicas_to_update:
    file_ids, projected = by_replica[replica]

    n_projected = len(projected)

    LOG.debug('Updating replica %s with file_ids %s projected %d', replica, file_ids, n_projected)

    if len(file_ids) == 0 and n_projected == 0:
        LOG.debug('Deleting')
        inventory.delete(replica)
    else:
        all_files = replica.block.files
        full_file_ids = set(f.id for f in all_files)

        if file_ids == full_file_ids:
            LOG.debug('Replica is full. Updating')
            replica.file_ids = None
            replica.size = sum(f.size for f in all_files)
            replica.last_update = int(time.time())
            inventory.register_update(replica)
        else:
            if replica.file_ids is None:
                existing_file_ids = full_file_ids
            else:
                existing_file_ids = set(replica.file_ids)

            if file_ids != existing_file_ids:
                LOG.debug('Replica content has changed: existing %s, new %s', existing_file_ids, file_ids)
                replica.file_ids = tuple(file_ids)
                replica.size = sum(f.size for f in all_files if f.id in file_ids)
                replica.last_update = int(time.time())
                inventory.register_update(replica)

# Remove subscription entries with status 'done'
# This is dangerous though - if inventory update fails on the server side for some reason,
# we might not see the inconsistency for a while.
rlfsm.close_subscriptions(done_ids)

LOG.info('Inventory update completed.')
