#!/usr/bin/env python

import os
import sys
from argparse import ArgumentParser

parser = ArgumentParser(description = 'Update subscriptions.')
parser.add_argument('--config', '-c', metavar = 'CONFIG', dest = 'config', help = 'Configuration JSON.')

args = parser.parse_args()
sys.argv = []

## Load the configuration
from dynamo.dataformat.configuration import Configuration

config = Configuration(args.config)

## Set up logging (write to stdout & stderr)
from dynamo.core.executable import make_standard_logger, read_only, inventory

LOG = make_standard_logger(config.get('log_level', 'info'))

## Set up a handle to the RLFSM
from dynamo.fileop.rlfsm import RLFSM

rlfsm = RLFSM(config.get('rlfsm', None))

if read_only:
    rlfsm.dry_run = True

## Set up a handle to the registry
from dynamo.utils.interface.mysql import MySQL

registry = MySQL(config.registry)

## Run
LOG.info('Updating the inventory from injections.')

if not read_only:
    registry.lock_tables(write = ['data_injections'])

n_injected = 0
n_deleted = 0

for cmd, objstr in registry.xquery('SELECT `cmd`, `obj` FROM `data_injections` ORDER BY `id`'):
    obj = inventory.make_object(objstr)

    if cmd == 'update':
        inventory.update(obj)
        n_injected += 1
    elif cmd == 'delete':
        inventory.delete(obj)
        n_deleted += 1

if not read_only:
    registry.query('DELETE FROM `data_injections`')
    registry.query('ALTER TABLE `data_injections` AUTO_INCREMENT = 1')

    registry.unlock_tables()

LOG.info('Injected %d objects and deleted %d objects.', n_injected, n_deleted)

LOG.info('Updating the inventory from transfers and deletions.')

rlfsm.update_inventory(inventory)

LOG.info('Inventory update completed.')
