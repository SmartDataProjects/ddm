#!/usr/bin/env python

import sys
from argparse import ArgumentParser

parser = ArgumentParser(description = 'Update site status.')
parser.add_argument('--config', '-c', metavar = 'CONFIG', dest = 'config', help = 'Configuration JSON.')

args = parser.parse_args()
sys.argv = []

## Load the configuration
from dynamo.dataformat import Configuration, Site

config = Configuration(args.config)

## Set up logging (write to stdout)
from dynamo.core.executable import make_standard_logger, authorized, inventory

LOG = make_standard_logger(config.get('log_level', 'info'))

## Load and initialize sources
from dynamo.source.siteinfo import SiteInfoSource

source_config = config.get('config', Configuration())
if 'include_sites' in config:
    source_config.include = config.include_sites
if 'exclude_sites' in config:
    source_config.exclude = config.exclude_sites

source = SiteInfoSource.get_instance(config.get('module', None), source_config)

## Start the update
from dynamo.utils.parallel import Map

def set_status(site):
    LOG.info('Updating %s status', site.name)
    site.status = source.get_site_status(site.name)
    for status in config.site_statuses:
        if site.name in status:
            site.status = int(status.split(":")[1])
            break
    LOG.info('Status: %d', site.status)

def set_mapping(site):
    LOG.info('Updating %s mapping', site.name)
    all_mappings = source.get_filename_mapping(site.name)
    for protocol, chains in all_mappings.iteritems():
        site.filename_mapping[protocol] = Site.FileNameMapping(chains)

    LOG.info('Created mappings for %s', all_mappings.keys())

sites = source.get_site_list(inventory)

Map().execute(set_status, sites)
Map().execute(set_mapping, sites)

for site in sites:
    inventory.update(site)

LOG.info('Site update completed.')
