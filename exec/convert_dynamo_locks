#!/usr/bin/env python

## Temporary script to convert web-based locks into registry-based local locks

import sys
import os
import re
import logging
import fnmatch

from argparse import ArgumentParser

parser = ArgumentParser(description = 'Convert web-based locks to registry locks')
parser.add_argument('--config', '-c', metavar = 'CONFIG', dest = 'config', required = True, help = 'Configuration JSON.')

args = parser.parse_args()
sys.argv = []

## Load the configuration
from dynamo.dataformat.configuration import Configuration

config = Configuration(args.config)

## Set up logging (write to stdout)
from dynamo.core.executable import make_standard_logger

LOG = make_standard_logger(config.log_level)

## Start conversion
from dynamo.policy.producers import WebReplicaLock
from dynamo.utils.interface.webservice import POST
from dynamo.core.executable import inventory
from dynamo.core.executable import registry

LOG.info('Translating web-based replica locks into DB-based locks.')

expiry = '2018-02-28'
comment = 'Auto-produced by dynamo'

# we process one source at a time, because each source registers mysql locks as a different user
for name, source_conf in config.sources.items():
    LOG.info('Translating ' + name)

    instance_conf = Configuration({'sources': {name: source_conf.clone()}, 'auth': config.auth})

    weblock = WebReplicaLock(instance_conf)
    weblock.update(inventory)

    data = []
    
    for dataset in inventory.datasets.itervalues():
        try:
            locked_blocks = dataset.attr['locked_blocks']
        except KeyError:
            # weblock did not create any lock for this dataset
            continue
    
        entries = []
    
        # if the lock applies to all sites and all blocks of this dataset, we just make one global lock
        collapse_dataset = True
        locked_sites = set()

        for site, blocks in locked_blocks.iteritems():
            locked_sites.add(site)

            replica = site.find_dataset_replica(dataset)
    
            if blocks == set(br.block for br in replica.block_replicas):
                entries.append({'item': dataset.name, 'sites': site.name, 'expires': expiry, 'comment': comment})
            else:
                for block in blocks:
                    entries.append({'item': dataset.name + '#' + block.real_name(), 'sites': site.name, 'expires': expiry, 'comment': comment})
    
                collapse_dataset = False

        if locked_sites != set(r.site for r in dataset.replicas):
            collapse_dataset = False
    
        if collapse_dataset:
            # replace entries with a single-element list
            entries = [{'item': dataset.name, 'expires': expiry, 'comment': comment}]
    
        data.extend(entries)
    
        dataset.attr.pop('locked_blocks')

    LOG.info('Sending %d datasets and blocks to registry frontend', len(data))

    if not args.test_run:
        request_url = 'detoxlock/set?asuser=%s&service=%s' % (source_conf.user, source_conf.service)
        registry.frontend.make_request(request_url, method = POST, options = data, format = 'json')
