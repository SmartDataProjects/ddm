#!/usr/bin/env python

import sys
import os
import time

from argparse import ArgumentParser

parser = ArgumentParser(description = 'Detox')
parser.add_argument('--config', '-c', metavar = 'CONFIG', dest = 'config', help = 'Configuration JSON.')

args = parser.parse_args()
sys.argv = []

## Load the configuration
from dynamo.dataformat.configuration import Configuration

config = Configuration(args.config)

## Set up logging (write to stdout)
from dynamo.core.executable import authorized, make_standard_logger

LOG = make_standard_logger(config.get('log_level', 'info'))

## Loop over active transfers and check against inventory
from dynamo.core.executable import inventory
from dynamo.request.deletion import DeletionRequestManager
from dynamo.request.copy import CopyRequestManager
from dynamo.operation.deletion import DeletionInterface
from dynamo.operation.history import DeletionHistoryDatabase
from dynamo.fileop.rlfsm import RLFSM
import dynamo.dataformat as df
from dynamo.dataformat.request import Request, RequestAction
from dynamo.dataformat.history import DeletedReplica

deletion_manager = DeletionRequestManager(config.get('manager', None))
copy_manager = CopyRequestManager(config.get('manager', None))
history = DeletionHistoryDatabase(config.get('history', None))
if 'deletion' in config:
    deletion = DeletionInterface.get_instance(config.deletion.module, config.deletion.config)
else:
    deletion = DeletionInterface.get_instance()

if not authorized:
    deletion_manager.set_read_only()
    copy_manager.set_read_only()
    history.set_read_only()
    deletion.set_read_only()

# Check the inventory content and update the requests
deletion_manager.collect_updates(inventory)
incomplete_drep, incomplete_brep = copy_manager.collect_updates(inventory)

if config.get('remake_subscriptions', True):
    # Make sure incomplete replicas do have file subscriptions
    rlfsm = RLFSM(config.get('rlfsm', None))
    rlfsm.set_read_only(not authorized)

    subscriptions = rlfsm.get_subscriptions(inventory, 'transfer', status = ['new', 'inbatch', 'done', 'retry'])
    # We need to compare LFNs instead of file objects themselves because the files cache may be wiped out between this line and the comparison line
    subscribed_files = set(s.file.lfn for s in subscriptions)
    
    for replica in incomplete_drep:
        for block_replica in replica.block_replicas:
            if block_replica.is_complete() or block_replica.group is df.Group.null_group:
                # owned by null group -> being deleted
                continue
    
            for lfile in block_replica.block.files - block_replica.files():
                if lfile.lfn not in subscribed_files:
                    LOG.warning('%s somehow lost subscription to %s. Remaking.', lfile.lfn, block_replica.site.name)
                    rlfsm.subscribe_file(block_replica.site, lfile)
    
    for replica in incomplete_brep:
        if replica.group is df.Group.null_group:
            continue

        for lfile in replica.block.files - replica.files():
            if lfile.lfn not in subscribed_files:
                LOG.warning('%s somehow lost subscription to %s. Remaking.', lfile.lfn, replica.site.name)
                rlfsm.subscribe_file(replica.site, lfile)

# Execute deletion operations on new deletion requests
new_requests = deletion_manager.get_requests(statuses = [Request.ST_NEW])

for request in new_requests.itervalues():
    invalid_items = []
    invalid_sites = []
    datasets = request.find_items(inventory, invalid_items)
    sites = request.find_sites(inventory, invalid_sites)

    for item in invalid_items:
        LOG.error('Invalid item in request %d: %s', request.request_id, item)
    for site in invalid_sites:
        LOG.error('Invalid site in request %d: %s', request.request_id, site)

    # Organize replicas by sites
    replica_lists = {}

    for site in sites:
        replica_list = []

        for dataset, blocks in datasets.iteritems():
            replica = site.find_dataset_replica(dataset)
            if replica is None:
                continue

            replica_clone = df.DatasetReplica(dataset, site)
            replica_clone.copy(replica)
            # we don't need to clone because we don't change anything for block replicas
            replica_clone.block_replicas = set(replica.block_replicas)

            if blocks is None:
                replica_clone.growing = False
                replica_list.append((replica_clone, None))
            else:
                block_replicas = []
                for block in blocks:
                    block_replica = replica.find_block_replica(block)
                    if block_replica is None:
                        continue

                    block_replicas.append(block_replica)

                if len(block_replicas) != 0:
                    replica_list.append((replica_clone, block_replicas))

        if len(replica_list) != 0:
            replica_lists[site] = replica_list

    if len(replica_lists) == 0:
        # Nothing to delete here
        request.status = Request.ST_COMPLETED
        deletion_manager.update_request(request)
        continue

    activation_list = []
    now = int(time.time())

    for site, replica_list in replica_lists.iteritems():
        LOG.info('Issuing deletion of %d replicas at %s', len(replica_list), site.name)

        record = history.make_entry(site.name)

        scheduled = deletion.schedule_deletions(replica_list, record.operation_id)

        for replica, block_replicas in scheduled:
            if block_replicas is None:
                replica.growing = False
                replica.group = inventory.groups[None]
                inventory.update(replica)
                block_replicas = replica.block_replicas

                activation_list.append((replica.dataset.name, site.name, now))
            else:
                for block_replica in block_replicas:
                    activation_list.append((block_replica.block.full_name(), site.name, now))

            deleted_size = 0

            for block_replica in block_replicas:
                block_replica.group = inventory.groups[None]
                inventory.update(block_replica)

                deleted_size += block_replica.size

            record.replicas.append(DeletedReplica(replica.dataset.name, deleted_size))

        history.update_entry(record)

    request.activate(activation_list)
    for action in request.actions:
        action.status = RequestAction.ST_QUEUED

    deletion_manager.update_request(request)
