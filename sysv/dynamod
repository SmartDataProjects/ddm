#!/bin/bash
# --------------------------------------------------------------------------------------------------
# dynamod       Startup script for the Dynamo detox/dealer Server
#
# chkconfig: - 70 15
# description:
#
# processname: dynamod
# pidfile:     /var/run/dynamod.pid
# --------------------------------------------------------------------------------------------------
# Source function library.
. /etc/rc.d/init.d/functions

# This will prevent initlog from swallowing up a pass-phrase prompt if
# mod_ssl needs a pass-phrase from the user.
INITLOG_ARGS=""

PROG=_DYNAMO_BASE_/bin/dynamo # pgrep pattern of the main program
EXECUTABLE=dynamod # executable this script spawns
TARGET=_DYNAMO_BASE_/bin/dynamod # full path to the executable

# Path to the running script, server binary, and short-form for messages.
PIDFILE=${PIDFILE-/var/run/dynamod.pid}
LOCKFILE=${LOCKFILE-/var/lock/subsys/dynamod}

EXITCODE=0
STOP_TIMEOUT=${STOP_TIMEOUT-120} # it takes some time to restore databases

# Start dynamo daemon (dynamod)
start() {
  PIDS=$(ps ax | grep $EXECUTABLE | grep -v grep | grep -v 'init\.d' | awk '/^[0-9]/ {print $1}')
  if [ "$PIDS" ]
  then
    echo "$EXECUTABLE already running: $PIDS"
    return 1
  fi

  if [ -e $PIDFILE ]
  then
    echo "$EXECUTABLE does not appear running but PID file $PIDFILE exists."
    echo "PID: $(cat $PIDFILE)"
    return 1
  fi

  if [ -e $LOCKFILE ]
  then
    echo "$EXECUTABLE may have just started in another session."
    return 1
  fi

  touch $LOCKFILE

  echo -n $"Starting $EXECUTABLE:"
  daemon --user=_USER_ --pidfile=$PIDFILE $TARGET \&
  EXITCODE=$?
  echo

  if [ $EXITCODE -eq 0 ]
  then
    echo $(pgrep -n $EXECUTABLE) > $PIDFILE
  fi

  rm $LOCKFILE

  return $EXITCODE
}

# Stop dynamo daemon (dynamod)
stop() {
  echo -n $"Stopping $EXECUTABLE:"
  killproc -p $PIDFILE -d $STOP_TIMEOUT $TARGET
  EXITCODE=$?
  echo
  PROGPID=$(pgrep -nf $PROG)
  if [ $PROGPID ]
  then
    echo "The main program ($PROGPID) will stay alive until normal termination."
  fi

  [ $EXITCODE -eq 0 ] && rm -f $PIDFILE
}

# See how we were called.
case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status -p $PIDFILE $EXECUTABLE
    EXITCODE=$?
    ;;
  restart)
    stop
    start
    ;;
  condrestart|try-restart)
    if status -p $PIDFILE $EXECUTABLE >&/dev/null
    then
      stop
      start
    fi
    ;;
  *)
    echo $"Usage: $EXECUTABLE {start|stop|restart|status|help}"
    EXITCODE=2
esac

exit $EXITCODE
